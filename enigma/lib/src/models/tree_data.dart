/// This file was autogenerated

library tree_data;

import 'package:built_value/serializer.dart';
import 'package:built_value/built_value.dart';
import 'nx_cell.dart';
import 'package:built_collection/built_collection.dart';
import 'nx_validation_error.dart';
import 'nx_cell_position.dart';
part 'tree_data.g.dart';

/// Renders the properties of a TreeData object. Is the layout for TreeDataDef.
/// For more information about the definition of TreeData, see _Generic object_.
/// <div class=note>To retrieve data from the TreeData object, use the method called GetHyperCubeTreeData.</div>
abstract class TreeData implements Built<TreeData, TreeDataBuilder> {
  static Serializer<TreeData> get serializer => _$treeDataSerializer;

  /// Name of the alternate state.
  /// Default is current selections _$_ .
  /// Original name: qStateName
  @nullable
  @BuiltValueField(wireName: 'qStateName')
  String get stateName;

  /// The total number of nodes on each dimension.
  /// Original name: qNodesOnDim
  @nullable
  @BuiltValueField(wireName: 'qNodesOnDim')
  BuiltList<NxCell> get nodesOnDim;

  /// This parameter is optional and is displayed in case of error.
  /// Original name: qError
  @nullable
  @BuiltValueField(wireName: 'qError')
  NxValidationError get error;

  /// Information on the dimension.
  /// Original name: qDimensionInfo
  @nullable
  @BuiltValueField(wireName: 'qDimensionInfo')
  BuiltList<NxCell> get dimensionInfo;

  /// Defines the order of the dimenion levels/columns in the TreeData object.
  /// Column numbers are separated by a comma.
  /// Example: [1,0,2] means that the first level in the tree structure is dimension 1, followed by dimension 0 and dimension 2.
  /// Original name: qEffectiveInterColumnSortOrder
  @nullable
  @BuiltValueField(wireName: 'qEffectiveInterColumnSortOrder')
  BuiltList<NxCell> get effectiveInterColumnSortOrder;

  /// True if other row exists.
  /// Original name: qHasOtherValues
  @nullable
  @BuiltValueField(wireName: 'qHasOtherValues')
  bool get hasOtherValues;

  /// Title of the TreeData object, for example the title of a chart.
  /// Original name: qTitle
  @nullable
  @BuiltValueField(wireName: 'qTitle')
  String get title;

  /// Position of the last expended cell.
  /// This property is optional.
  /// Original name: qLastExpandedPos
  @nullable
  @BuiltValueField(wireName: 'qLastExpandedPos')
  NxCellPosition get lastExpandedPos;

  /// The message displayed if calculation condition is not fulfilled.
  /// Original name: qCalcCondMsg
  @nullable
  @BuiltValueField(wireName: 'qCalcCondMsg')
  String get calcCondMsg;

  factory TreeData([updates(TreeDataBuilder b)]) = _$TreeData;

  factory TreeData.init(
      {String stateName,
      BuiltList<NxCell> nodesOnDim,
      NxValidationError error,
      BuiltList<NxCell> dimensionInfo,
      BuiltList<NxCell> effectiveInterColumnSortOrder,
      bool hasOtherValues,
      String title,
      NxCellPosition lastExpandedPos,
      String calcCondMsg}) = _$TreeData._;

  TreeData._();
}
