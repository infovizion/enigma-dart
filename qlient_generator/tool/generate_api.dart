import 'dart:convert';
import 'dart:io';
import 'package:recase/recase.dart';

var listTypes = <String, String>{};
main() {
  // var schemaContent = new File('tool/schema.full.json').readAsStringSync();
  // var schemaJson = json.decode(schemaContent);
  // Map definitions = schemaJson['definitions'];
  // var smallDefs = new Map.fromEntries(definitions.entries.take(5));
  // var smallSchema = {'definitions': smallDefs};
  // var schemaPP = new JsonEncoder.withIndent('  ').convert(smallSchema);
  // print(schemaPP);
  // new File('tool/schema.json').writeAsStringSync(schemaPP);
  var schemaContent = new File('tool/schema.json').readAsStringSync();
  var schemaJson = json.decode(schemaContent);
  Map definitions = schemaJson['definitions'];
  for (var key in definitions.keys) {
    populateListTypes(key, definitions[key]);
  }
  print(listTypes);
  for (var key in definitions.keys) {
    generateStruct(key, definitions[key]);
  }
  generateModelExport(definitions.keys);
}

populateListTypes(String arrayTypeName, Map content) {
  if (content['type'] == 'array') {
    var importList = <String>[];
    var dartType = getDartType(content, importList);
    listTypes[arrayTypeName] = importList.first;
  }
}

generateStruct(String className, Map content) {
  String fileName = getModelFileName(className);
  var buffer = new StringBuffer();
  addComment(content['description'], buffer, '');
  buffer.writeln('class $className {');
  Map properties = content['properties'];
  if (properties == null) {
    return;
  }
  var importList = <String>[];
  properties.forEach((fieldName, content) {
    generateField(fieldName, content, buffer, importList);
  });
  buffer.writeln('}');
  var outFile = new File('lib/src/models/$fileName');
  outFile.createSync();
  var importDirectives = importList.join('\n');
  var fileContent = '''
/// This code was autogenerated
import 'package:built_value/built_value.dart';
$importDirectives

$buffer
''';
  outFile.writeAsStringSync(fileContent);
}

String getModelFileName(className) => new ReCase(className).snakeCase + '.dart';

addComment(String description, StringBuffer buffer, String indent) {
  if (description == null) {
    return;
  }
  var lines = description.split('\n');
  for (var line in lines) {
    buffer.writeln('$indent/// $line');
  }
}

generateModelExport(Iterable<String> classNames) {
  var outFile = new File('lib/src/models.dart');
  outFile.createSync();
  var buffer = new StringBuffer();
  for (var each in classNames) {
    buffer.writeln("export 'models/${getModelFileName(each)}';");
  }
  outFile.writeAsStringSync(buffer.toString());
}

String getDartType(Map fieldContent, List<String> importList) {
  String ref = fieldContent[r'$ref'];
  if (ref != null) {
    var className = ref.replaceFirst('#/definitions/', '');
    if (className == 'JsonObject') {
      importList.add("import 'package:built_value/json_object.dart';");
    } else if (listTypes[className] != null) {
      var itemType = listTypes[className];
      importList.add("import '${getModelFileName(itemType)}';");
      return 'List<$itemType>';
    } else {
      importList.add("import '${getModelFileName(className)}';");
    }
    return className;
  }
  String jsonType = fieldContent['type'];
  const type2dartType = const {
    'string': 'String',
    'boolean': 'bool',
    'number': 'num',
    'integer': 'int',
  };
  String dartType = '';
  if (listTypes[jsonType] != null) {
    var itemType = listTypes[jsonType];
    importList.add("import '${getModelFileName(itemType)}';");
    dartType = 'List<$itemType>';
  } else if (jsonType == 'array') {
    var itemType = getDartType(fieldContent['items'], importList);
    dartType = 'List<$itemType>';
  } else {
    dartType = type2dartType[jsonType];
  }
  return dartType;
}

var qPattern = new RegExp('^q');
generateField(String jsonFieldName, Map fieldContent, StringBuffer buffer,
    List<String> importList) {
  addComment(fieldContent['description'], buffer, '  ');
  var fieldName = jsonFieldName.replaceFirst(qPattern, '');
  fieldName = new ReCase(fieldName).camelCase;
  var dartType = getDartType(fieldContent, importList);
  buffer.writeln('  $dartType $fieldName;');
}
