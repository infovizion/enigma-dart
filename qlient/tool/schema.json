{
  "definitions": {
    "FieldValue": {
      "type": "object",
      "properties": {
        "qText": {
          "type": "string",
          "description": "Text related to the field value.\nThis parameter is optional."
        },
        "qIsNumeric": {
          "type": "boolean",
          "description": "Is set to true if the value is a numeric.\nThis parameter is optional. Default is false."
        },
        "qNumber": {
          "type": "number",
          "description": "Numeric value of the field.\nThis parameter is displayed if _qIsNumeric_ is set to true.\nThis parameter is optional.",
          "format": "double"
        }
      }
    },
    "NxFieldProperties": {
      "type": "object",
      "properties": {
        "qOneAndOnlyOne": {
          "type": "boolean",
          "description": "This parameter is set to true, if the field has one and only one selection (not 0 and not more than 1).\nIf this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.\n<div class=note>The property _OneAndOnlyOne_ can be set to true if one and only value has been selected in the field prior to setting the property. </div>"
        }
      }
    },
    "AlfaNumString": {
      "type": "object",
      "properties": {
        "qString": {
          "type": "string",
          "description": "Calculated value."
        },
        "qIsNum": {
          "type": "boolean",
          "description": "Is set to true if the value is a numeric."
        }
      }
    },
    "NxVariableProperties": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the variable."
        },
        "qNumberPresentation": {
          "type": "object",
          "description": "Defines the format of the value of a variable.",
          "$ref": "#/definitions/FieldAttributes"
        },
        "qIncludeInBookmark": {
          "type": "boolean",
          "description": "Set this property to true to update the variable when applying a bookmark.\nThe value of a variable can affect the state of the selections.\nThe default value is false.",
          "default": false
        },
        "qUsePredefListedValues": {
          "type": "boolean",
          "description": "The value of a variable can be an enumeration.\nSet this property to true to reflect the predefined values in an enumeration."
        },
        "qPreDefinedList": {
          "type": "array",
          "description": "List of enumerations.\nThis property is used if _qUsePredefListedValues_ is set to true.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FieldAttributes": {
      "type": "object",
      "description": "IMPORTANT: WHENEVER YOU DO A CHANGE IN THIS TOPIC, DO THE EQUIVALENT CHANGE IN THE FieldAttributes SNIPPET AS WELL!\nSets the formatting of a field.\nThe properties of _qFieldAttributes_ and the formatting mechanism are described below.\n\n### Formatting mechanism\nThe formatting mechanism depends on the type set in _qType,_ as shown below:\n<div class=note>In case of inconsistencies between the type and the format pattern, the format pattern takes precedence over the type.</div>\n\n### Type is DATE, TIME, TIMESTAMP or INTERVAL\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the formatting is as defined in _qFmt_ .\n* If _qFmt_ is empty, the formatting is defined by the number interpretation variables included at the top of the script ( _TimeFormat_ , _DateFormat_ , _TimeStampFormat_ ).\n* The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.\n\n### Type is INTEGER\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the formatting mechanism uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , no formatting is applied. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ and the number interpretation variables defined in the script are not used .\n\n### Type is REAL\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , and if the value is almost an integer value (for example, 14,000012), the value is formatted as an integer. The properties _qDec_ , _qThou_ , _qnDec_ , _qUseThou_ are not used.\n* If no format pattern is defined in _qFmt_ , and if _qnDec_ is defined and not 0, the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n* If no format pattern is defined in _qFmt_ , and if _qnDec_ is 0, the number of decimals is 14 and the property _qDec_ is used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n\n### Type is FIX\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of the script ( _DecimalSep_ and _ThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , the properties _qDec_ and _qnDec_ are used. If _qDec_ is not defined, the variable _DecimalSep_ defined at the top of the script is used.\n\n### Type is MONEY\nThe following applies:\n* If a format pattern is defined in _qFmt_ , the engine looks at the values set in _qDec_ and _qThou_ . If these properties are not defined, the engine uses the number interpretation variables included at the top of any script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).\n* If no format pattern is defined in _qFmt_ , the engine uses the number interpretation variables included at the top of the script ( _MoneyDecimalSep_ and _MoneyThousandSep_ ).\n\n### Type is ASCII\nNo formatting, _qFmt_ is ignored.",
      "properties": {
        "qType": {
          "type": "string",
          "description": "Type of the field.\nDefault is U.\n\nOne of:\n* U or UNKNOWN\n* A or ASCII\n* I or INTEGER\n* R or REAL\n* F or FIX\n* M or MONEY\n* D or DATE\n* T or TIME\n* TS or TIMESTAMP\n* IV or INTERVAL",
          "default": "UNKNOWN",
          "enum": [
            "UNKNOWN",
            "ASCII",
            "INTEGER",
            "REAL",
            "FIX",
            "MONEY",
            "DATE",
            "TIME",
            "TIMESTAMP",
            "INTERVAL"
          ]
        },
        "qnDec": {
          "type": "integer",
          "description": "Number of decimals.\nDefault is 10.",
          "format": "int32",
          "default": 10
        },
        "qUseThou": {
          "type": "integer",
          "description": "Defines whether or not a thousands separator must be used.\nDefault is 0.",
          "format": "int32",
          "default": 0
        },
        "qFmt": {
          "type": "string",
          "description": "Defines the format pattern that applies to _qText_ .\nIs used in connection to the type of the field (parameter **qType** ).\nFor more information, see _Formatting mechanism_.\nExample: _YYYY-MM-DD_ for a date."
        },
        "qDec": {
          "type": "string",
          "description": "Defines the decimal separator.\nExample: **.**"
        },
        "qThou": {
          "type": "string",
          "description": "Defines the thousand separator (if any).\nIs used if **qUseThou** is set to 1.\nExample: **,**"
        }
      }
    },
    "GenericObjectLayout": {
      "type": "object",
      "description": "Is the layout for _GenericObjectProperties_.",
      "properties": {
        "qInfo": {
          "type": "object",
          "description": "Identifier and type of the generic object.",
          "$ref": "#/definitions/NxInfo"
        },
        "qMeta": {
          "type": "object",
          "description": "Information about publishing and permissions.\nThis parameter is optional.",
          "$ref": "#/definitions/NxMeta"
        },
        "qExtendsId": {
          "type": "string",
          "description": "Should be set to create an object that is linked to another object. Enter the identifier of the object you want to link to.\nIf you do not want to link your object, set this parameter to an empty string."
        },
        "qHasSoftPatches": {
          "type": "boolean",
          "description": "Is set to true if the generic object contains some properties that are not persistent (a soft patch was applied)."
        },
        "qError": {
          "type": "object",
          "description": "Gives information on the error.\nThis parameter is optional.",
          "$ref": "#/definitions/NxLayoutErrors"
        },
        "qSelectionInfo": {
          "type": "object",
          "description": "Information about the selections.",
          "$ref": "#/definitions/NxSelectionInfo"
        }
      }
    },
    "NxInfo": {
      "type": "object",
      "properties": {
        "qId": {
          "type": "string",
          "description": "Identifier of the object.\nIf the chosen identifier is already in use, the engine automatically sets another one.\nIf an identifier is not set, the engine automatically sets one.\nThis parameter is optional."
        },
        "qType": {
          "type": "string",
          "description": "Type of the object.\nThis parameter is mandatory."
        }
      }
    },
    "NxMeta": {
      "type": "object",
      "description": "Layout for _NxMetaDef_.",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name.\nThis property is optional."
        }
      }
    },
    "NxLayoutErrors": {
      "type": "object",
      "properties": {
        "qErrorCode": {
          "type": "integer",
          "description": "Error code.",
          "format": "int32"
        }
      }
    },
    "NxSelectionInfo": {
      "type": "object",
      "properties": {
        "qInSelections": {
          "type": "boolean",
          "description": "Is set to true if the visualization is in selection mode.\nFor more information about the selection mode, see _BeginSelections Method_."
        },
        "qMadeSelections": {
          "type": "boolean",
          "description": "Is set to true if the visualization is in selection mode and if some selections have been made while in selection mode.\nFor more information about the selection mode, see _BeginSelections Method_."
        }
      }
    },
    "NxPage": {
      "type": "object",
      "properties": {
        "qLeft": {
          "type": "integer",
          "description": "Position from the left.\nCorresponds to the first column.",
          "format": "int32"
        },
        "qTop": {
          "type": "integer",
          "description": "Position from the top.\nCorresponds to the first row.",
          "format": "int32"
        },
        "qWidth": {
          "type": "integer",
          "description": "Number of columns in the page. The indexing of the columns may vary depending on whether the cells are expanded or not (parameter _qAlwaysFullyExpanded_ in _HyperCubeDef_ ).",
          "format": "int32"
        },
        "qHeight": {
          "type": "integer",
          "description": "Number of rows or elements in the page. The indexing of the rows may vary depending on whether the cells are expanded or not (parameter _qAlwaysFullyExpanded_ in _HyperCubeDef_ ).",
          "format": "int32"
        }
      }
    },
    "NxDataPage": {
      "type": "object",
      "properties": {
        "qMatrix": {
          "type": "array",
          "description": "Array of data.",
          "items": {
            "$ref": "#/definitions/NxCellRows"
          }
        },
        "qTails": {
          "type": "array",
          "description": "Array of tails.\nIs used for hypercube objects with multiple dimensions. It might happen that due to the window size some elements in a group cannot be displayed in the same page as the other elements of the group. Elements of a group of dimensions can be part of the previous or the next tail.\nIf there is no tail, the array is empty _[ ]_ .",
          "items": {
            "$ref": "#/definitions/NxGroupTail"
          }
        },
        "qArea": {
          "type": "object",
          "description": "Size and offset of the data in the matrix.",
          "$ref": "#/definitions/Rect"
        },
        "qIsReduced": {
          "type": "boolean",
          "description": "Is set to true, if the data have been reduced.\nThe default value is false.",
          "default": false
        }
      }
    },
    "NxCellRows": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/NxCell"
      }
    },
    "NxCell": {
      "type": "object",
      "properties": {
        "qText": {
          "type": "string",
          "description": "Some text.\nThis parameter is optional."
        },
        "qNum": {
          "type": "number",
          "description": "A value.\nThis parameter is optional.",
          "format": "double"
        },
        "qElemNumber": {
          "type": "integer",
          "description": "Rank number of the value, starting from 0.\nIf the element number is a negative number, it means that the returned value is not an element number.\nYou can get the following negative values:\n* -1: the cell is a _Total_ cell. It shows a total.\n* -2: the cell is collapsed. Applies to pivot tables.\n* -3: the cell belongs to the group _Others_ .\n* -4: the cell is empty. Applies to pivot tables.",
          "format": "int32"
        },
        "qState": {
          "type": "string",
          "description": "State of the value.\nThe default state for a measure is L.\n\nOne of:\n* L or LOCKED\n* S or SELECTED\n* O or OPTION\n* D or DESELECTED\n* A or ALTERNATIVE\n* X or EXCLUDED\n* XS or EXCL_SELECTED\n* XL or EXCL_LOCKED\n* NSTATES",
          "enum": [
            "LOCKED",
            "SELECTED",
            "OPTION",
            "DESELECTED",
            "ALTERNATIVE",
            "EXCLUDED",
            "EXCL_SELECTED",
            "EXCL_LOCKED",
            "NSTATES"
          ]
        },
        "qIsEmpty": {
          "type": "boolean",
          "description": "Is set to _true_ , if **qText** and **qNum** are empty.\nThis parameter is optional. The default value is _false_ ."
        },
        "qIsTotalCell": {
          "type": "boolean",
          "description": "Is set to _true_ if a total is displayed in the cell.\nThis parameter is optional. The default value is _false_ .\nNot applicable to list objects."
        },
        "qIsOtherCell": {
          "type": "boolean",
          "description": "Is set to _true_ if the cell belongs to the group _Others_ .\nDimension values can be set as _Others_ depending on what has been defined in **OtherTotalSpecProp** .\nThis parameter is optional. The default value is _false_ .\nNot applicable to list objects."
        },
        "qFrequency": {
          "type": "string",
          "description": "Frequency of the value.\nThis parameter is optional."
        },
        "qHighlightRanges": {
          "type": "object",
          "description": "Search hits.\nThe search hits are highlighted.\nThis parameter is optional.",
          "$ref": "#/definitions/NxHighlightRanges"
        },
        "qAttrExps": {
          "type": "object",
          "description": "Attribute expression values.",
          "$ref": "#/definitions/NxAttributeExpressionValues"
        },
        "qAttrDims": {
          "type": "object",
          "description": "Attribute dimensions values.",
          "$ref": "#/definitions/NxAttributeDimValues"
        },
        "qIsNull": {
          "type": "boolean",
          "description": "Is set to _true_ if the value is Null."
        }
      }
    },
    "NxHighlightRanges": {
      "type": "object",
      "properties": {
        "qRanges": {
          "type": "array",
          "description": "Ranges of highlighted values.",
          "items": {
            "$ref": "#/definitions/CharRange"
          }
        }
      }
    },
    "CharRange": {
      "type": "object",
      "properties": {
        "qCharPos": {
          "type": "integer",
          "description": "Position of the first search occurrence.",
          "format": "int32"
        },
        "qCharCount": {
          "type": "integer",
          "description": "Number of occurrences found.",
          "format": "int32"
        }
      }
    },
    "NxAttributeExpressionValues": {
      "type": "object",
      "properties": {
        "qValues": {
          "type": "array",
          "description": "List of attribute expressions values.",
          "items": {
            "$ref": "#/definitions/NxSimpleValue"
          }
        }
      }
    },
    "NxSimpleValue": {
      "type": "object",
      "properties": {
        "qText": {
          "type": "string",
          "description": "Text related to the attribute expression value."
        },
        "qNum": {
          "type": "number",
          "description": "Numeric value of the attribute expression.\nSet to NaN (Not a Number) if the attribute expression value is not numeric.",
          "format": "double"
        }
      }
    },
    "NxAttributeDimValues": {
      "type": "object",
      "properties": {
        "qValues": {
          "type": "array",
          "description": "List of values.",
          "items": {
            "$ref": "#/definitions/NxSimpleDimValue"
          }
        }
      }
    },
    "NxSimpleDimValue": {
      "type": "object",
      "properties": {
        "qText": {
          "type": "string",
          "description": "Text related to the attribute expression value.\nThis property is optional. No text is returned if the attribute expression value is a numeric."
        },
        "qElemNo": {
          "type": "integer",
          "description": "Element number.",
          "format": "int32"
        }
      }
    },
    "NxGroupTail": {
      "type": "object",
      "properties": {
        "qUp": {
          "type": "integer",
          "description": "Number of elements that are part of the previous tail.\nThis number depends on the paging, more particularly it depends on the values defined in _qTop_ and _qHeight_ .\nIs not shown if the value is 0.\nThis parameter is optional.",
          "format": "int32"
        },
        "qDown": {
          "type": "integer",
          "description": "Number of elements that are part of the next tail.\nThis number depends on the paging, more particularly it depends on the values defined in _qTop_ and _qHeight_\nIs not shown if the value is 0.\nThis parameter is optional.",
          "format": "int32"
        }
      }
    },
    "Rect": {
      "type": "object",
      "properties": {
        "qLeft": {
          "type": "integer",
          "description": "Position from the left.\nCorresponds to the first column.",
          "format": "int32"
        },
        "qTop": {
          "type": "integer",
          "description": "Position from the top.\nCorresponds to the first row.",
          "format": "int32"
        },
        "qWidth": {
          "type": "integer",
          "description": "Number of columns in the page. The indexing of the columns may vary depending on whether the cells are expanded or not (parameter _qAlwaysFullyExpanded_ in _HyperCubeDef_ ).",
          "format": "int32"
        },
        "qHeight": {
          "type": "integer",
          "description": "Number of rows or elements in the page. The indexing of the rows may vary depending on whether the cells are expanded or not (parameter _qAlwaysFullyExpanded_ in _HyperCubeDef_ ).",
          "format": "int32"
        }
      }
    },
    "NxPivotPage": {
      "type": "object",
      "properties": {
        "qLeft": {
          "type": "array",
          "description": "Information about the left dimension values of a pivot table.",
          "items": {
            "$ref": "#/definitions/NxPivotDimensionCell"
          }
        },
        "qTop": {
          "type": "array",
          "description": "Information about the top dimension values of a pivot table. If there is no top dimension in the pivot table, information about the measures are given.",
          "items": {
            "$ref": "#/definitions/NxPivotDimensionCell"
          }
        },
        "qData": {
          "type": "array",
          "description": "Array of data.",
          "items": {
            "$ref": "#/definitions/ArrayOfNxValuePoint"
          }
        },
        "qArea": {
          "type": "object",
          "description": "Size and offset of the data in the matrix.",
          "$ref": "#/definitions/Rect"
        }
      }
    },
    "NxPivotDimensionCell": {
      "type": "object",
      "properties": {
        "qText": {
          "type": "string",
          "description": "Some text."
        },
        "qElemNo": {
          "type": "integer",
          "description": "Rank number of the value.\nIf set to -1, it means that the value is not an element number.",
          "format": "int32"
        },
        "qValue": {
          "type": "number",
          "description": "Value of the cell.\nIs set to _NaN_ , if the value is not a number.",
          "format": "double"
        },
        "qCanExpand": {
          "type": "boolean",
          "description": "If set to true, it means that the cell can be expanded.\nThis parameter is not returned if it is set to false."
        },
        "qCanCollapse": {
          "type": "boolean",
          "description": "If set to true, it means that the cell can be collapsed.\nThis parameter is not returned if it is set to false."
        },
        "qType": {
          "type": "string",
          "description": "Type of the cell.\n\nOne of:\n* V or NX_DIM_CELL_VALUE\n* E or NX_DIM_CELL_EMPTY\n* N or NX_DIM_CELL_NORMAL\n* T or NX_DIM_CELL_TOTAL\n* O or NX_DIM_CELL_OTHER\n* A or NX_DIM_CELL_AGGR\n* P or NX_DIM_CELL_PSEUDO\n* R or NX_DIM_CELL_ROOT\n* U or NX_DIM_CELL_NULL\n* G or NX_DIM_CELL_GENERATED",
          "enum": [
            "NX_DIM_CELL_VALUE",
            "NX_DIM_CELL_EMPTY",
            "NX_DIM_CELL_NORMAL",
            "NX_DIM_CELL_TOTAL",
            "NX_DIM_CELL_OTHER",
            "NX_DIM_CELL_AGGR",
            "NX_DIM_CELL_PSEUDO",
            "NX_DIM_CELL_ROOT",
            "NX_DIM_CELL_NULL",
            "NX_DIM_CELL_GENERATED"
          ]
        },
        "qUp": {
          "type": "integer",
          "description": "Number of elements that are part of the previous tail.\nThis number depends on the paging, more particularly it depends on the values defined in _qTop_ and _qHeight_ .",
          "format": "int32"
        },
        "qDown": {
          "type": "integer",
          "description": "Number of elements that are part of the next tail.\nThis number depends on the paging, more particularly it depends on the values defined in _qTop_ and _qHeight_ .",
          "format": "int32"
        },
        "qSubNodes": {
          "type": "array",
          "description": "Information about sub nodes (or sub cells).\nThe array is empty _[ ]_ when there is no sub nodes.",
          "items": {
            "$ref": "#/definitions/NxPivotDimensionCell"
          }
        },
        "qAttrExps": {
          "type": "object",
          "description": "Information about attribute expressions.\nThe array is empty _[ ]_ when there is no attribute expressions.",
          "$ref": "#/definitions/NxAttributeExpressionValues"
        },
        "qAttrDims": {
          "type": "object",
          "description": "Information about attribute dimensions.",
          "$ref": "#/definitions/NxAttributeDimValues"
        }
      }
    },
    "ArrayOfNxValuePoint": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/NxPivotValuePoint"
      }
    },
    "NxPivotValuePoint": {
      "type": "object",
      "properties": {
        "qLabel": {
          "type": "string",
          "description": "Label of the cell.\nThis parameter is optional."
        },
        "qText": {
          "type": "string",
          "description": "Some text related to the cell."
        },
        "qNum": {
          "type": "number",
          "description": "Value of the cell.",
          "format": "double"
        },
        "qType": {
          "type": "string",
          "description": "Type of the cell.\n\nOne of:\n* V or NX_DIM_CELL_VALUE\n* E or NX_DIM_CELL_EMPTY\n* N or NX_DIM_CELL_NORMAL\n* T or NX_DIM_CELL_TOTAL\n* O or NX_DIM_CELL_OTHER\n* A or NX_DIM_CELL_AGGR\n* P or NX_DIM_CELL_PSEUDO\n* R or NX_DIM_CELL_ROOT\n* U or NX_DIM_CELL_NULL\n* G or NX_DIM_CELL_GENERATED",
          "enum": [
            "NX_DIM_CELL_VALUE",
            "NX_DIM_CELL_EMPTY",
            "NX_DIM_CELL_NORMAL",
            "NX_DIM_CELL_TOTAL",
            "NX_DIM_CELL_OTHER",
            "NX_DIM_CELL_AGGR",
            "NX_DIM_CELL_PSEUDO",
            "NX_DIM_CELL_ROOT",
            "NX_DIM_CELL_NULL",
            "NX_DIM_CELL_GENERATED"
          ]
        },
        "qAttrExps": {
          "type": "object",
          "description": "Attribute expressions values.",
          "$ref": "#/definitions/NxAttributeExpressionValues"
        },
        "qAttrDims": {
          "type": "object",
          "$ref": "#/definitions/NxAttributeDimValues"
        }
      }
    },
    "NxStackPage": {
      "type": "object",
      "properties": {
        "qData": {
          "type": "array",
          "description": "Array of data.",
          "items": {
            "$ref": "#/definitions/NxStackedPivotCell"
          }
        },
        "qArea": {
          "type": "object",
          "description": "Size and offset of the data in the matrix.",
          "$ref": "#/definitions/Rect"
        }
      }
    },
    "NxStackedPivotCell": {
      "type": "object",
      "properties": {
        "qText": {
          "type": "string",
          "description": "Some text."
        },
        "qElemNo": {
          "type": "integer",
          "description": "Rank number of the value.\nIf set to -1, it means that the value is not an element number.",
          "format": "int32"
        },
        "qValue": {
          "type": "number",
          "description": "Value of the cell.\nIs set to _NaN_ , if the value is not a number.",
          "format": "double"
        },
        "qCanExpand": {
          "type": "boolean",
          "description": "If set to true, it means that the cell can be expanded.\nThis parameter is not returned if it is set to false."
        },
        "qCanCollapse": {
          "type": "boolean",
          "description": "If set to true, it means that the cell can be collapsed.\nThis parameter is not returned if it is set to false."
        },
        "qType": {
          "type": "string",
          "description": "Type of the cell.\n\nOne of:\n* V or NX_DIM_CELL_VALUE\n* E or NX_DIM_CELL_EMPTY\n* N or NX_DIM_CELL_NORMAL\n* T or NX_DIM_CELL_TOTAL\n* O or NX_DIM_CELL_OTHER\n* A or NX_DIM_CELL_AGGR\n* P or NX_DIM_CELL_PSEUDO\n* R or NX_DIM_CELL_ROOT\n* U or NX_DIM_CELL_NULL\n* G or NX_DIM_CELL_GENERATED",
          "enum": [
            "NX_DIM_CELL_VALUE",
            "NX_DIM_CELL_EMPTY",
            "NX_DIM_CELL_NORMAL",
            "NX_DIM_CELL_TOTAL",
            "NX_DIM_CELL_OTHER",
            "NX_DIM_CELL_AGGR",
            "NX_DIM_CELL_PSEUDO",
            "NX_DIM_CELL_ROOT",
            "NX_DIM_CELL_NULL",
            "NX_DIM_CELL_GENERATED"
          ]
        },
        "qMaxPos": {
          "type": "number",
          "description": "Total of the positive values in the current group of cells.",
          "format": "double"
        },
        "qMinNeg": {
          "type": "number",
          "description": "Total of the negative values in the current group of cells.",
          "format": "double"
        },
        "qUp": {
          "type": "integer",
          "description": "Number of elements that are part of the previous tail.",
          "format": "int32"
        },
        "qDown": {
          "type": "integer",
          "description": "Number of elements that are part of the next tail.",
          "format": "int32"
        },
        "qRow": {
          "type": "integer",
          "description": "Row index in the data matrix.\nThe indexing starts from 0.",
          "format": "int32"
        },
        "qSubNodes": {
          "type": "array",
          "description": "Information about sub nodes (or sub cells).\nThe array is empty _[ ]_ when there are no sub nodes.",
          "items": {
            "$ref": "#/definitions/NxStackedPivotCell"
          }
        },
        "qAttrExps": {
          "type": "object",
          "description": "Attribute expressions values.",
          "$ref": "#/definitions/NxAttributeExpressionValues"
        },
        "qAttrDims": {
          "type": "object",
          "description": "Attribute dimensions values.",
          "$ref": "#/definitions/NxAttributeDimValues"
        }
      }
    },
    "NxContinuousDataOptions": {
      "type": "object",
      "properties": {
        "qStart": {
          "type": "number",
          "description": "Start value.",
          "format": "double"
        },
        "qEnd": {
          "type": "number",
          "description": "End value.",
          "format": "double"
        },
        "qNbrPoints": {
          "type": "integer",
          "description": "Number of bins for binning.",
          "format": "int32"
        },
        "qMaxNbrTicks": {
          "type": "integer",
          "description": "Maximum number of ticks.",
          "format": "int32"
        },
        "qMaxNumberLines": {
          "type": "integer",
          "description": "Maximum number of lines.",
          "format": "int32",
          "default": -1
        }
      }
    },
    "NxAxisData": {
      "type": "object",
      "properties": {
        "qAxis": {
          "type": "array",
          "description": "List of axis data.",
          "items": {
            "$ref": "#/definitions/NxAxisTicks"
          }
        }
      }
    },
    "NxAxisTicks": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the derived definition."
        },
        "qTags": {
          "type": "array",
          "description": "List of tags.",
          "items": {
            "type": "string"
          }
        },
        "qTicks": {
          "type": "array",
          "description": "List of ticks.",
          "items": {
            "$ref": "#/definitions/NxTickCell"
          }
        }
      }
    },
    "NxTickCell": {
      "type": "object",
      "properties": {
        "qText": {
          "type": "string",
          "description": "Tick's label."
        },
        "qStart": {
          "type": "number",
          "description": "Start value.",
          "format": "double"
        },
        "qEnd": {
          "type": "number",
          "description": "End value.",
          "format": "double"
        }
      }
    },
    "NxTreeDataOption": {
      "type": "object",
      "description": "Specifies all the paging filters needed to define the tree to be fetched.",
      "properties": {
        "qMaxNbrOfNodes": {
          "type": "integer",
          "description": "Maximum number of nodes in the tree. If this limit is exceeded, no nodes are returned. All nodes are counted.",
          "format": "int32"
        },
        "qTreeNodes": {
          "type": "array",
          "description": "Defines areas of the tree to be fetched. Areas must be defined left to right.",
          "items": {
            "$ref": "#/definitions/NxPageTreeNode"
          }
        },
        "qTreeLevels": {
          "type": "object",
          "description": "Filters out complete dimensions from the fetched tree.",
          "$ref": "#/definitions/NxPageTreeLevel"
        }
      },
      "x-qlik-stability": "experimental"
    },
    "NxPageTreeNode": {
      "type": "object",
      "description": "Defines an area of the tree to be fetched.",
      "properties": {
        "qArea": {
          "type": "object",
          "description": "The area of the tree to be fetched. If no area is defined on a dimension, all existing nodes are included.",
          "$ref": "#/definitions/Rect"
        },
        "qAllValues": {
          "type": "boolean",
          "description": "When set to true, generated nodes (based on current selection) will be inserted into the returned tree even when there is no actual value. For example, suppose you are looking for hybrid car sales at all car dealerships. Normally, only dealerships where hybrid cars are sold would be part of the returned tree but with qAllValues set to true, all available dealerships will be included regardless if they sold any hybrid cars or not."
        }
      },
      "x-qlik-stability": "experimental"
    },
    "NxPageTreeLevel": {
      "type": "object",
      "properties": {
        "qLeft": {
          "type": "integer",
          "description": "The first dimension that is to be part of the tree, counted from the left. For example, if qLeft is equal to 1, omit nodes from the first dimension in the current sort order.",
          "format": "int32"
        },
        "qDepth": {
          "type": "integer",
          "description": "Number of dimensions to include in the tree.",
          "format": "int32",
          "default": -1
        }
      },
      "x-qlik-stability": "experimental"
    },
    "NxTreeNode": {
      "type": "object",
      "description": "Represents a dimension in the tree.",
      "properties": {
        "qText": {
          "type": "string",
          "description": "The text version of the value, if available."
        },
        "qElemNo": {
          "type": "integer",
          "description": "Element number.",
          "format": "int32"
        },
        "qNodeNr": {
          "type": "integer",
          "description": "A generated number applicable to this page only. Used so that children can easily identify who their parents are.",
          "format": "int32"
        },
        "qParentNode": {
          "type": "integer",
          "description": "The qNodeNr of this node's parent for the current page.",
          "format": "int32"
        },
        "qRow": {
          "type": "integer",
          "description": "Row index in the data matrix.\nThe indexing starts from 0.",
          "format": "int32"
        },
        "qType": {
          "type": "string",
          "description": "Type of the cell.\n\nOne of:\n* V or NX_DIM_CELL_VALUE\n* E or NX_DIM_CELL_EMPTY\n* N or NX_DIM_CELL_NORMAL\n* T or NX_DIM_CELL_TOTAL\n* O or NX_DIM_CELL_OTHER\n* A or NX_DIM_CELL_AGGR\n* P or NX_DIM_CELL_PSEUDO\n* R or NX_DIM_CELL_ROOT\n* U or NX_DIM_CELL_NULL\n* G or NX_DIM_CELL_GENERATED",
          "enum": [
            "NX_DIM_CELL_VALUE",
            "NX_DIM_CELL_EMPTY",
            "NX_DIM_CELL_NORMAL",
            "NX_DIM_CELL_TOTAL",
            "NX_DIM_CELL_OTHER",
            "NX_DIM_CELL_AGGR",
            "NX_DIM_CELL_PSEUDO",
            "NX_DIM_CELL_ROOT",
            "NX_DIM_CELL_NULL",
            "NX_DIM_CELL_GENERATED"
          ]
        },
        "qValues": {
          "type": "array",
          "description": "The measures for this node.",
          "items": {
            "$ref": "#/definitions/NxTreeValue"
          }
        },
        "qNodes": {
          "type": "array",
          "description": "The children of this node in the tree structure.",
          "items": {
            "$ref": "#/definitions/NxTreeNode"
          }
        },
        "qAttrExps": {
          "type": "object",
          "description": "Attribute expression values.",
          "$ref": "#/definitions/NxAttributeExpressionValues"
        },
        "qAttrDims": {
          "type": "object",
          "description": "Attribute dimension values.",
          "$ref": "#/definitions/NxAttributeDimValues"
        }
      },
      "x-qlik-stability": "experimental"
    },
    "NxTreeValue": {
      "type": "object",
      "description": "Represents a measure.",
      "properties": {
        "qText": {
          "type": "string",
          "description": "The text version of the value, if available."
        },
        "qValue": {
          "type": "number",
          "description": "Value of the cell.\nIs set to _NaN_ , if the value is not a number.",
          "format": "double"
        },
        "qAttrExps": {
          "type": "object",
          "description": "Attribute expression values.",
          "$ref": "#/definitions/NxAttributeExpressionValues"
        },
        "qAttrDims": {
          "type": "object",
          "description": "Attribute dimension values.",
          "$ref": "#/definitions/NxAttributeDimValues"
        }
      },
      "x-qlik-stability": "experimental"
    },
    "NxViewPort": {
      "type": "object",
      "properties": {
        "qWidth": {
          "type": "integer",
          "description": "Width of the canvas in pixels.",
          "format": "int32"
        },
        "qHeight": {
          "type": "integer",
          "description": "Height of the canvas in pixels.",
          "format": "int32"
        },
        "qZoomLevel": {
          "type": "integer",
          "description": "Zoom level.",
          "format": "int32"
        }
      }
    },
    "NxDataAreaPage": {
      "type": "object",
      "properties": {
        "qLeft": {
          "type": "number",
          "description": "Position from the left.\nCorresponds to the lowest possible value of the first measure (the measure on the x-axis).",
          "format": "double"
        },
        "qTop": {
          "type": "number",
          "description": "Position from the top.\nCorresponds to the highest possible value of the second measure (the measure on the y-axis).",
          "format": "double"
        },
        "qWidth": {
          "type": "number",
          "description": "Width of the page.\nCorresponds to the highest possible value of the first measure (the measure on the x-axis).",
          "format": "double"
        },
        "qHeight": {
          "type": "number",
          "description": "Height of the page.\nThe difference between _qTop_ and _qHeight_ gives the lowest possible value of the second measure (the measure on the y-axis).",
          "format": "double"
        }
      }
    },
    "NxPatch": {
      "type": "object",
      "properties": {
        "qOp": {
          "type": "string",
          "description": "Operation to perform.\n\nOne of:\n* add or Add\n* remove or Remove\n* replace or Replace",
          "enum": [
            "Add",
            "Remove",
            "Replace"
          ]
        },
        "qPath": {
          "type": "string",
          "description": "Path to the property to add, remove or replace."
        },
        "qValue": {
          "type": "string",
          "description": "This parameter is not used in a remove operation.\nCorresponds to the value of the property to add or to the new value of the property to update.\nExamples:\n\"false\", \"2\", \"\\\"New title\\\"\""
        }
      }
    },
    "GenericObjectProperties": {
      "type": "object",
      "properties": {
        "qInfo": {
          "type": "object",
          "description": "Identifier and type of the object.\nThis parameter is mandatory.",
          "$ref": "#/definitions/NxInfo"
        },
        "qExtendsId": {
          "type": "string",
          "description": "Should be set to create an object that is linked to another object. Enter the identifier of the linking object (i.e the object you want to link to).\nThis parameter is mandatory.\nIf you do not want to link your object, set this parameter to an empty string."
        },
        "qMetaDef": {
          "type": "object",
          "description": "Definition of the dynamic properties.",
          "$ref": "#/definitions/NxMetaDef"
        }
      }
    },
    "NxMetaDef": {
      "type": "object",
      "description": "Used to collect meta data.\n\n### Properties\nSemantic type with an empty structure."
    },
    "GenericObjectEntry": {
      "type": "object",
      "properties": {
        "qProperty": {
          "type": "object",
          "description": "Information about the generic object properties.",
          "$ref": "#/definitions/GenericObjectProperties"
        },
        "qChildren": {
          "type": "array",
          "description": "Information about the children of the generic object.",
          "items": {
            "$ref": "#/definitions/GenericObjectEntry"
          }
        },
        "qEmbeddedSnapshotRef": {
          "type": "object",
          "description": "Reference to a bookmark/snapshot that is embedded in the generic object.",
          "$ref": "#/definitions/GenericBookmarkEntry"
        }
      }
    },
    "GenericBookmarkEntry": {
      "type": "object",
      "properties": {
        "qProperties": {
          "type": "object",
          "description": "Information about the properties of the bookmark.",
          "$ref": "#/definitions/GenericBookmarkProperties"
        },
        "qBookmark": {
          "type": "object",
          "description": "Information about the bookmark.",
          "$ref": "#/definitions/NxBookmark"
        }
      }
    },
    "GenericBookmarkProperties": {
      "type": "object",
      "properties": {
        "qInfo": {
          "type": "object",
          "description": "Information about the bookmark.\nThis parameter is mandatory.",
          "$ref": "#/definitions/NxInfo"
        },
        "qMetaDef": {
          "type": "object",
          "description": "Definition of the dynamic properties.",
          "$ref": "#/definitions/NxMetaDef"
        }
      }
    },
    "NxBookmark": {
      "type": "object",
      "properties": {
        "qStateData": {
          "type": "array",
          "description": "List of selections for each state.",
          "items": {
            "$ref": "#/definitions/AlternateStateData"
          }
        },
        "qUtcModifyTime": {
          "type": "number",
          "description": "Time when the bookmark was created.",
          "format": "double"
        },
        "qVariableItems": {
          "type": "array",
          "description": "List of the variables in the app at the time the bookmark was created.",
          "items": {
            "$ref": "#/definitions/BookmarkVariableItem"
          }
        }
      }
    },
    "AlternateStateData": {
      "type": "object",
      "properties": {
        "qStateName": {
          "type": "string",
          "description": "Name of the alternate state.\nDefault is current selections: $"
        },
        "qFieldItems": {
          "type": "array",
          "description": "List of the selections.",
          "items": {
            "$ref": "#/definitions/BookmarkFieldItem"
          }
        }
      }
    },
    "BookmarkFieldItem": {
      "type": "object",
      "properties": {
        "qDef": {
          "type": "object",
          "description": "Name and type of the field.",
          "$ref": "#/definitions/FieldDefEx"
        },
        "qLocked": {
          "type": "boolean",
          "description": "Indicates if the field is locked.\nDefault is false."
        },
        "qSelectInfo": {
          "type": "object",
          "description": "Information on the selections criteria.",
          "$ref": "#/definitions/SelectInfo"
        },
        "qValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldValue"
          }
        },
        "qExcludedValues": {
          "type": "array",
          "description": "List of excluded values.\nEither the list of selected values or the list of excluded values is displayed.",
          "items": {
            "$ref": "#/definitions/FieldValue"
          }
        },
        "qAndMode": {
          "type": "boolean",
          "description": "If set to true, selections within a list object are made in AND mode; If you have a list object that lists all customers, by selecting Customer 1 and Customer 2 while in and-mode, all records that are associated with Customer 1 **and** Customer 2 are selected.\nThe default value is false; selections within a list object are made in OR mode. If you have a list object that lists all customers, by selecting Customer 1 and Customer 2 while in or-mode, all records that are associated with either Customer 1 **or** Customer 2 are selected.\nThis parameter is not returned if set to false."
        },
        "qOneAndOnlyOne": {
          "type": "boolean",
          "description": "If set to true, the field has always one selection (not 0 and not more than 1). If another value is selected, the previous one is unselected.\nThe default value is false. This parameter is not returned if set to false."
        }
      }
    },
    "FieldDefEx": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the field."
        },
        "qType": {
          "type": "string",
          "description": "Type of data entity.\n\nOne of:\n* NOT_PRESENT\n* PRESENT\n* IS_CYCLIC_GROUP\n* IS_DRILL_GROUP\n* IS_VAR\n* IS_EXPR\n* IS_IMPLICIT\n* IS_DETAIL",
          "enum": [
            "NOT_PRESENT",
            "PRESENT",
            "IS_CYCLIC_GROUP",
            "IS_DRILL_GROUP",
            "IS_VAR",
            "IS_EXPR",
            "IS_IMPLICIT",
            "IS_DETAIL"
          ]
        }
      }
    },
    "SelectInfo": {
      "type": "object",
      "properties": {
        "qTextSearch": {
          "type": "string",
          "description": "Text search string.\nEverything that matches the text is selected.\nThis parameter is optional."
        },
        "qRangeLo": {
          "type": "number",
          "description": "Lower value of the search range.\nThis parameter is used when performing range selections or text searches in dimensions.\nDefault is Null.",
          "format": "double",
          "default": -0.0
        },
        "qRangeHi": {
          "type": "number",
          "description": "Highest value of the search range.\nThis parameter is used when performing range selections or text searches in dimensions.\nDefault is Null.",
          "format": "double",
          "default": -0.0
        },
        "qNumberFormat": {
          "type": "object",
          "description": "Gives information about the formatting of the range.\nThis parameter is used when performing range selections or text searches in dimensions.",
          "$ref": "#/definitions/FieldAttributes"
        },
        "qRangeInfo": {
          "type": "array",
          "description": "This parameter is used when performing range selections or text searches in measures.\nGives information about the range of selections.\nbool SoftLock = false;",
          "items": {
            "$ref": "#/definitions/RangeSelectInfo"
          }
        },
        "qSoftLock": {
          "type": "boolean",
          "default": false
        },
        "qContinuousRangeInfo": {
          "type": "array",
          "description": "List of information about ranges for selections.",
          "items": {
            "$ref": "#/definitions/Range"
          }
        }
      }
    },
    "RangeSelectInfo": {
      "type": "object",
      "properties": {
        "qRangeLo": {
          "type": "number",
          "description": "Lowest value in the range.",
          "format": "double",
          "default": -0.0
        },
        "qRangeHi": {
          "type": "number",
          "description": "Highest value in the range.",
          "format": "double",
          "default": -0.0
        },
        "qMeasure": {
          "type": "string",
          "description": "Label of the measure."
        }
      }
    },
    "Range": {
      "type": "object",
      "properties": {
        "qMin": {
          "type": "number",
          "description": "Lowest value in the range",
          "format": "double"
        },
        "qMax": {
          "type": "number",
          "description": "Highest value in the range",
          "format": "double"
        },
        "qMinInclEq": {
          "type": "boolean",
          "description": "If set to true, the range includes the lowest value in the range of selections (Equals to ). [bn(50500)]\nExample:\nThe range is [1,10]. If _qMinInclEq_ is set to true it means that 1 is included in the range of selections."
        },
        "qMaxInclEq": {
          "type": "boolean",
          "description": "If set to true, the range includes the highest value in the range of selections (Equals to ). [bn(50500)]\nExample:\nThe range is [1,10]. If _qMinInclEq_ is set to true it means that 10 is included in the range of selections."
        }
      }
    },
    "BookmarkVariableItem": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the variable."
        },
        "qValue": {
          "type": "object",
          "description": "Value of the variable.",
          "$ref": "#/definitions/FieldValue"
        }
      }
    },
    "NxSelectionCell": {
      "type": "object",
      "properties": {
        "qType": {
          "type": "string",
          "description": "Type of cells to select.\n\nOne of:\n* D or NX_CELL_DATA\n* T or NX_CELL_TOP\n* L or NX_CELL_LEFT",
          "enum": [
            "NX_CELL_DATA",
            "NX_CELL_TOP",
            "NX_CELL_LEFT"
          ]
        },
        "qCol": {
          "type": "integer",
          "description": "Column index to select.\nIndexing starts from 0.\nIf the cell's type is:\n* D, the index is based on the data matrix.\n* T, the index is based on the data matrix.\n* L, the index is based on the left dimensions indexes.",
          "format": "int32"
        },
        "qRow": {
          "type": "integer",
          "description": "Row index to select.\nIndexing starts from 0.\nIf the cell's type is:\n* D, the index is based on the data matrix.\n* T, the index is based on the top dimensions indexes.\n* L, the index is based on the data matrix.",
          "format": "int32"
        }
      }
    },
    "NxRangeSelectInfo": {
      "type": "object",
      "properties": {
        "qRange": {
          "type": "object",
          "description": "Range of values.",
          "$ref": "#/definitions/Range"
        },
        "qMeasureIx": {
          "type": "integer",
          "description": "Number of the measure to select.\nNumbering starts from 0.",
          "format": "int32"
        }
      }
    },
    "NxMultiRangeSelectInfo": {
      "type": "object",
      "properties": {
        "qRanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NxRangeSelectInfo"
          }
        },
        "qColumnsToSelect": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "NxTreeMultiRangeSelectInfo": {
      "type": "object",
      "properties": {
        "qRanges": {
          "type": "array",
          "description": "An array of Ranges.",
          "items": {
            "$ref": "#/definitions/NxTreeRangeSelectInfo"
          }
        }
      },
      "x-qlik-stability": "experimental"
    },
    "NxTreeRangeSelectInfo": {
      "type": "object",
      "properties": {
        "qRange": {
          "type": "object",
          "description": "Range of values.",
          "$ref": "#/definitions/Range"
        },
        "qMeasureIx": {
          "type": "integer",
          "description": "Number of the measure to select.\nNumbering starts from 0.",
          "format": "int32"
        },
        "qDimensionIx": {
          "type": "integer",
          "description": "Number of the dimension to select\nmeasure from.  Numbering starts from 0.",
          "format": "int32"
        }
      },
      "x-qlik-stability": "experimental"
    },
    "NxContinuousRangeSelectInfo": {
      "type": "object",
      "properties": {
        "qRange": {
          "type": "object",
          "description": "Range information.",
          "$ref": "#/definitions/Range"
        },
        "qDimIx": {
          "type": "integer",
          "description": "Dimension index.",
          "format": "int32"
        }
      }
    },
    "ObjectInterface": {
      "properties": {
        "qType": {
          "type": "string"
        },
        "qHandle": {
          "type": "integer",
          "format": "int32"
        },
        "qGenericType": {
          "type": "string"
        },
        "qGenericId": {
          "type": "string"
        }
      }
    },
    "NxLinkedObjectInfo": {
      "type": "object",
      "properties": {
        "qRootId": {
          "type": "string",
          "description": "Identifier of the root object.\nIf the linked object is a child, the root identifier is the identifier of the parent.\nIf the linked object is an app object, the root identifier is the same than the identifier of the linked object since the linked object is a root object."
        },
        "qInfo": {
          "type": "object",
          "description": "Information about the linked object.",
          "$ref": "#/definitions/NxInfo"
        }
      }
    },
    "AppObjectListDef": {
      "type": "object",
      "description": "Defines the list of objects in an app.\n<div class=note>An app object is a generic object created at app level.</div>",
      "properties": {
        "qType": {
          "type": "string",
          "description": "Type of the app list."
        },
        "qData": {
          "type": "object",
          "description": "Data that you want to include in the app list definition.\nYou need to enter the paths to the information you want to retrieve.",
          "$ref": "#/definitions/JsonObject"
        }
      },
      "x-qlik-see-also": [
        "[List all app objects](#csh-list-app-objects)",
        "[AppObjectList](#csh-AppObjectList)"
      ]
    },
    "JsonObject": {
      "type": "object"
    },
    "AppObjectList": {
      "type": "object",
      "description": "Lists the app objects. Is the layout for _AppObjectListDef_.\n<div class=note>An app object is a generic object created at app level.</div>",
      "properties": {
        "qItems": {
          "type": "array",
          "description": "Information about the list of dimensions.",
          "items": {
            "$ref": "#/definitions/NxContainerEntry"
          }
        }
      }
    },
    "NxContainerEntry": {
      "type": "object",
      "properties": {
        "qInfo": {
          "type": "object",
          "description": "Information about the object.",
          "$ref": "#/definitions/NxInfo"
        },
        "qMeta": {
          "type": "object",
          "description": "Information on publishing and permissions.",
          "$ref": "#/definitions/NxMeta"
        },
        "qData": {
          "type": "object",
          "description": "Set of data.",
          "$ref": "#/definitions/JsonObject"
        }
      }
    },
    "BookmarkListDef": {
      "type": "object",
      "description": "Defines the list of bookmarks.",
      "properties": {
        "qType": {
          "type": "string",
          "description": "Type of the list."
        },
        "qData": {
          "type": "object",
          "description": "Data",
          "$ref": "#/definitions/JsonObject"
        }
      },
      "x-qlik-see-also": [
        "[List the bookmarks in an app](#csh-list-bookmarks-in-app)",
        "[BookmarkList](#csh-BookmarkList)"
      ]
    },
    "BookmarkList": {
      "type": "object",
      "description": "Lists the bookmarks. Is the layout for _BookmarkListDef_.",
      "properties": {
        "qItems": {
          "type": "array",
          "description": "Information about the list of bookmarks.",
          "items": {
            "$ref": "#/definitions/NxContainerEntry"
          }
        }
      }
    },
    "ChildListDef": {
      "type": "object",
      "description": "Defines the list of children of a generic object.\nWhat is defined in _ChildListDef_ has an impact on what the _GetLayout_ method returns. See _Example_ for more information.",
      "properties": {
        "qData": {
          "type": "object",
          "description": "Data that you want to include in the child list definition.\nYou need to enter the paths to the information you want to retrieve.",
          "$ref": "#/definitions/JsonObject"
        }
      },
      "x-qlik-see-also": [
        "[Create an app object](#csh-create-app-object)",
        "[List the children of a generic object](#csh-list-childs-in-generic-object)",
        "[ChildList](#csh-ChildList)"
      ]
    },
    "ChildList": {
      "type": "object",
      "description": "Lists the children of a generic object. Is the layout for _ChildListDef_.\n<div class=note>ChildList is used by the _GetLayout Method_ to list the children of a generic object. </div>",
      "properties": {
        "qItems": {
          "type": "array",
          "description": "Information about the items in the app object.",
          "items": {
            "$ref": "#/definitions/NxContainerEntry"
          }
        }
      }
    },
    "DimensionListDef": {
      "type": "object",
      "description": "Defines the lists of dimensions.",
      "properties": {
        "qType": {
          "type": "string",
          "description": "Type of the list."
        },
        "qData": {
          "type": "object",
          "description": "Data",
          "$ref": "#/definitions/JsonObject"
        }
      },
      "x-qlik-see-also": [
        "[List the dimensions in an app](#csh-list-dimensions-in-app)",
        "[DimensionList](#csh-DimensionList)"
      ]
    },
    "DimensionList": {
      "type": "object",
      "description": "Lists the dimensions. Is the layout for _DimensionListDef_.",
      "properties": {
        "qItems": {
          "type": "array",
          "description": "Information about the list of dimensions.",
          "items": {
            "$ref": "#/definitions/NxContainerEntry"
          }
        }
      }
    },
    "EmbeddedSnapshotDef": {
      "type": "object",
      "description": "Defines the embedded snapshot in a generic object.\n\n### Properties\n\"EmbeddedSnapshotDef\": {}",
      "x-qlik-see-also": [
        "[EmbeddedSnapshot](#csh-EmbeddedSnapshot)"
      ]
    },
    "EmbeddedSnapshot": {
      "type": "object",
      "description": "Renders the embedded snapshot in an object.\nThe following is returned:\n* Any dynamic properties defined in the bookmark\n* Any properties defined in _qEmbeddedSnapshot_\n\n### Properties\n\"qEmbeddedSnapshot\": {}"
    },
    "ExtensionListDef": {
      "type": "object"
    },
    "ExtensionList": {
      "type": "object",
      "properties": {
        "qItems": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FieldListDef": {
      "type": "object",
      "description": "Defines the fields to show.",
      "properties": {
        "qShowSystem": {
          "type": "boolean",
          "description": "Shows the system tables if set to true.\nDefault is false.",
          "default": false
        },
        "qShowHidden": {
          "type": "boolean",
          "description": "Shows the hidden fields if set to true.\nDefault is false.",
          "default": false
        },
        "qShowSemantic": {
          "type": "boolean",
          "description": "Show the semantic fields if set to true.\nDefault is false.",
          "default": false
        },
        "qShowSrcTables": {
          "type": "boolean",
          "description": "Shows the tables and fields present in the data model viewer if set to true.\nDefault is false.",
          "default": false
        },
        "qShowDefinitionOnly": {
          "type": "boolean",
          "description": "Shows the fields defined on the fly if set to true.\nDefault is false.",
          "default": false
        },
        "qShowDerivedFields": {
          "type": "boolean",
          "description": "Shows the fields and derived fields if set to true.\nDefault is false.",
          "default": false
        },
        "qShowImplicit": {
          "type": "boolean",
          "description": "Shows the Direct Discovery measure fields if set to true.\nDefault is false.",
          "default": false
        }
      },
      "x-qlik-see-also": [
        "[List the fields in an app](#csh-list-fields-in-app)",
        "[FieldList](#csh-FieldList)"
      ]
    },
    "FieldList": {
      "type": "object",
      "description": "Lists the fields present in the data model viewer. Is the layout for _FieldListDef_.",
      "properties": {
        "qItems": {
          "type": "array",
          "description": "Array of items.",
          "items": {
            "$ref": "#/definitions/NxFieldDescription"
          }
        }
      }
    },
    "NxFieldDescription": {
      "type": "object",
      "description": "### NxDerivedFieldsdata\n<table>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Type</th>\n</tr>\n<tr>\n<td>qDerivedDefinitionName</td>\n<td>Name of the derived definition.</td>\n<td>String</td>\n</tr>\n<tr>\n<td>qFieldDefs</td>\n<td>List of the derived fields.</td>\n<td>Array of <i>NxDerivedField</i></td>\n</tr>\n<tr>\n<td>qGroupDefs</td>\n<td>List of the derived groups.</td>\n<td>Array of <i>NxDerivedGroup</i></td>\n</tr>\n<tr>\n<td>qTags</td>\n<td>List of tags on the derived fields.</td>\n<td>Array of <i>String</i> </td>\n</tr>\n</table>",
      "properties": {
        "qIsSemantic": {
          "type": "boolean",
          "description": "If set to true, it means that the field is a semantic."
        },
        "qIsHidden": {
          "type": "boolean",
          "description": "If set to true, it means that the field is hidden."
        },
        "qIsSystem": {
          "type": "boolean",
          "description": "If set to true, it means that the field is a system field."
        },
        "qAndMode": {
          "type": "boolean",
          "description": "If set to true a logical AND (instead of a logical OR) is used when making selections in a field.\nThe default value is false."
        },
        "qName": {
          "type": "string",
          "description": "Name of the field"
        },
        "qCardinal": {
          "type": "integer",
          "description": "Number of distinct field values",
          "format": "int32"
        },
        "qTags": {
          "type": "array",
          "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII",
          "items": {
            "type": "string"
          }
        },
        "qIsDefinitionOnly": {
          "type": "boolean",
          "description": "If set to true, it means that the field is a field on the fly."
        },
        "qDerivedFieldData": {
          "type": "object",
          "description": "Lists the derived fields if any.",
          "$ref": "#/definitions/NxDerivedFieldDescriptionList"
        },
        "qIsDetail": {
          "type": "boolean",
          "description": "Is used for Direct Discovery.\nIf set to true, it means that the type of the field is detail."
        },
        "qIsImplicit": {
          "type": "boolean",
          "description": "Is used for Direct Discovery.\nIf set to true, it means that the type of the field is measure."
        },
        "qReadableName": {
          "type": "string"
        }
      }
    },
    "NxDerivedFieldDescriptionList": {
      "type": "object",
      "properties": {
        "qDerivedFieldLists": {
          "type": "array",
          "description": "Information about the derived fields.",
          "items": {
            "$ref": "#/definitions/NxDerivedFieldsData"
          }
        }
      }
    },
    "NxDerivedFieldsData": {
      "type": "object",
      "properties": {
        "qDerivedDefinitionName": {
          "type": "string",
          "description": "Name of the derived definition."
        },
        "qFieldDefs": {
          "type": "array",
          "description": "List of the derived fields.",
          "items": {
            "$ref": "#/definitions/NxDerivedField"
          }
        },
        "qGroupDefs": {
          "type": "array",
          "description": "List of the derived groups.",
          "items": {
            "$ref": "#/definitions/NxDerivedGroup"
          }
        },
        "qTags": {
          "type": "array",
          "description": "List of tags on the derived fields.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NxDerivedField": {
      "type": "object",
      "properties": {
        "qId": {
          "type": "string",
          "description": "Identifier of the derived field.\nThe identifier is unique."
        },
        "qName": {
          "type": "string",
          "description": "Combination of field name, definition and method.\nExample:\n_OrderDate.MyDefinition.Year_"
        },
        "qMethod": {
          "type": "string",
          "description": "Method name associated to the derived field."
        },
        "qExpr": {
          "type": "string",
          "description": "Expression of the derived field.\nExample:\nIf _qName_ is _OrderDate.MyDefinition.Year_ , the expression is as follows:\n_=${Mydefinition(OrderDate).Year}_"
        },
        "qTags": {
          "type": "array",
          "description": "List of tags.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NxDerivedGroup": {
      "type": "object",
      "properties": {
        "qId": {
          "type": "string",
          "description": "Identifier of the group."
        },
        "qName": {
          "type": "string",
          "description": "Name of the derived group."
        },
        "qGrouping": {
          "type": "string",
          "description": "Grouping type.\nThe grouping should be either H or C (Grouping is mandatory for derived definitions).\nThe parameter is mandatory.\n\nOne of:\n* N or GRP_NX_NONE\n* H or GRP_NX_HIEARCHY\n* C or GRP_NX_COLLECTION",
          "enum": [
            "GRP_NX_NONE",
            "GRP_NX_HIEARCHY",
            "GRP_NX_COLLECTION"
          ]
        },
        "qFieldDefs": {
          "type": "array",
          "description": "List of the derived fields in the group.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "HyperCubeDef": {
      "type": "object",
      "description": "Defines the properties of a hypercube.\nFor more information about the definition of a hypercube, see _Generic object_.",
      "properties": {
        "qStateName": {
          "type": "string",
          "description": "Name of the alternate state.\nDefault is current selections _$_ ."
        },
        "qDimensions": {
          "type": "array",
          "description": "Array of dimensions.",
          "items": {
            "$ref": "#/definitions/NxDimension"
          }
        },
        "qMeasures": {
          "type": "array",
          "description": "Array of measures.",
          "items": {
            "$ref": "#/definitions/NxMeasure"
          }
        },
        "qInterColumnSortOrder": {
          "type": "array",
          "description": "Defines the sort order of the columns in the hypercube.\nColumn numbers are separated by a comma.\nExample: [1,0,2] means that the first column to be sorted should be the column 1, followed by the column 0 and the column 2.\nThe default sort order is the order in which the dimensions and measures have been defined in the hypercube. By default, the pseudo-dimension (if any) is the most to the right in the array.\nThe index of the pseudo-dimension (if any) is -1.\nPseudo dimensions only apply for pivot tables with more than one measure.\nA pseudo dimension groups together the measures defined in a pivot table. You can neither collapse/expand a pseudo dimension nor make any selections in it.\nStacked pivot tables can only contain one measure.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "qSuppressZero": {
          "type": "boolean",
          "description": "Removes zero values.",
          "default": false
        },
        "qSuppressMissing": {
          "type": "boolean",
          "description": "Removes missing values.",
          "default": false
        },
        "qInitialDataFetch": {
          "type": "array",
          "description": "Initial data set.",
          "items": {
            "$ref": "#/definitions/NxPage"
          }
        },
        "qReductionMode": {
          "type": "string",
          "description": "\nOne of:\n* N or DATA_REDUCTION_NONE\n* D1 or DATA_REDUCTION_ONEDIM\n* S or DATA_REDUCTION_SCATTERED\n* C or DATA_REDUCTION_CLUSTERED\n* ST or DATA_REDUCTION_STACKED",
          "enum": [
            "DATA_REDUCTION_NONE",
            "DATA_REDUCTION_ONEDIM",
            "DATA_REDUCTION_SCATTERED",
            "DATA_REDUCTION_CLUSTERED",
            "DATA_REDUCTION_STACKED"
          ]
        },
        "qMode": {
          "type": "string",
          "description": "Defines the way the data are handled internally by the engine.\nDefault value is _DATA_MODE_STRAIGHT_ .\nA pivot table can contain several dimensions and measures whereas a stacked pivot table can contain several dimensions but only one measure.\n\nOne of:\n* S or DATA_MODE_STRAIGHT\n* P or DATA_MODE_PIVOT\n* K or DATA_MODE_PIVOT_STACK\n* T or DATA_MODE_TREE",
          "default": "DATA_MODE_STRAIGHT",
          "enum": [
            "DATA_MODE_STRAIGHT",
            "DATA_MODE_PIVOT",
            "DATA_MODE_PIVOT_STACK",
            "DATA_MODE_TREE"
          ]
        },
        "qPseudoDimPos": {
          "type": "integer",
          "format": "int32",
          "default": -1
        },
        "qNoOfLeftDims": {
          "type": "integer",
          "description": "Number of left dimensions.\nDefault value is -1. In that case, all dimensions are left dimensions.\nHidden dimensions (e.g. due to unfulfilled calc condition on dimension level) is still counted in this context.\nThe index related to each left dimension depends on the position of the pseudo dimension (if any).\nFor example, a pivot table with:\n* Four dimensions in the following order: Country, City, Product and Category.\n* One pseudo dimension in position 1 (the position is defined in _qInterColumnSortOrder_ )\n_qInterColumnSortOrder_ is (0,-1,1,2,3).\n* Three left dimensions ( _qNoOfLeftDims_ is set to 3).\n\nimplies that:\n* The index 0 corresponds to the left dimension Country.\n* The index 1 corresponds to the pseudo dimension.\n* The index 2 corresponds to the left dimension City.\n* Product and Category are top dimensions.\n\nAnother example:\n* Four dimensions in the following order: Country, City, Product and Category.\n* Three left dimensions ( _qNoOfLeftDims_ is set to 3).\n* One pseudo dimension.\n* The property _qInterColumnSortOrder_ is left empty.\n\nImplies that:\n* The index 0 corresponds to the left dimension Country.\n* The index 1 corresponds to the left dimension City.\n* The index 2 corresponds to the left dimension Product.\n* Category is a top dimension.\n* The pseudo dimension is a top dimension.",
          "format": "int32",
          "default": -1
        },
        "qAlwaysFullyExpanded": {
          "type": "boolean",
          "description": "If this property is set to true, the cells are always expanded. It implies that it is not possible to collapse any cells.\nThe default value is false.",
          "default": false
        },
        "qMaxStackedCells": {
          "type": "integer",
          "description": "Maximum number of cells for an initial data fetch (set in _qInitialDataFetch_ ) when in stacked mode ( _qMode_ is K).\nThe default value is 5000.",
          "format": "int32",
          "default": 5000
        },
        "qPopulateMissing": {
          "type": "boolean",
          "description": "If this property is set to true, the missing symbols (if any) are replaced by 0 if the value is a numeric and by an empty string if the value is a string.\nThe default value is false.",
          "default": false
        },
        "qShowTotalsAbove": {
          "type": "boolean",
          "description": "If set to true, the total (if any) is shown on the first row.\nThe default value is false.",
          "default": false
        },
        "qIndentMode": {
          "type": "boolean",
          "description": "This property applies for pivot tables and allows to change the layout of the table. An indentation is added to the beginning of each row.\nThe default value is false.",
          "default": false
        },
        "qCalcCond": {
          "type": "object",
          "description": "Specifies a calculation condition, which must be fulfilled for the hypercube to be (re)calculated.\nAs long as the condition is not met, the engine does not perform a new calculation.\nThis property is optional. By default, there is no calculation condition.",
          "$ref": "#/definitions/ValueExpr"
        },
        "qSortbyYValue": {
          "type": "integer",
          "description": "To enable the sorting by ascending or descending order in the values of a measure.\nThis property applies to pivot tables and stacked pivot tables.\nIn the case of a pivot table, the measure or pseudo dimension should be defined as a top dimension. The sorting is restricted to the values of the first measure in a pivot table.",
          "format": "int8",
          "default": 0
        },
        "qTitle": {
          "type": "object",
          "description": "Title of the hypercube, for example the title of a chart.",
          "$ref": "#/definitions/StringExpr"
        },
        "qCalcCondition": {
          "type": "object",
          "description": "Specifies a calculation condition object.\nIf CalcCondition.Cond is not fulfilled, the hypercube is not calculated and CalcCondition.Msg is evaluated.\nBy default, there is no calculation condition.\nThis property is optional.",
          "$ref": "#/definitions/NxCalcCond"
        },
        "qColumnOrder": {
          "type": "array",
          "description": "The order of the columns.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "x-qlik-see-also": [
        "[Drill up a hierarchy](#csh-drill-up-hierarchy)",
        "[Create a hypercube](#csh-create-hypercube)",
        "[HyperCube](#csh-HyperCube)"
      ]
    },
    "NxDimension": {
      "type": "object",
      "description": "<div class=note>Either **qDef** or **qLibraryId** must be set, but not both. </div> <div class=note>If the dimension is set in the hypercube and not in the library, this dimension cannot be shared with other objects.</div> <div class=note>A dimension that is set in the library can be used by many objects.</div>",
      "properties": {
        "qLibraryId": {
          "type": "string",
          "description": "Refers to a dimension stored in the library."
        },
        "qDef": {
          "type": "object",
          "description": "Refers to a dimension stored in the hypercube.",
          "$ref": "#/definitions/NxInlineDimensionDef"
        },
        "qNullSuppression": {
          "type": "boolean",
          "description": "If set to true, no null values are returned."
        },
        "qIncludeElemValue": {
          "type": "boolean"
        },
        "qOtherTotalSpec": {
          "type": "object",
          "description": "Sets the dimension limits. Each dimension of a hypercube is configured separately.\nDefines if some values (grouped as _Others_ ) should be grouped together in the visualization.\nFor example in a pie chart all values lower than 200 could be grouped together.",
          "$ref": "#/definitions/OtherTotalSpecProp"
        },
        "qShowTotal": {
          "type": "boolean"
        },
        "qShowAll": {
          "type": "boolean",
          "description": "If set to true, all dimension values are shown."
        },
        "qOtherLabel": {
          "type": "object",
          "description": "This property is used when some dimension limits are set.\nLabel of the _Others_ group. The default label is _Others_ .\nExample:\n_\"qOtherLabel\":\"= &lt;label&gt;\"_\nor\n_\"qOtherLabel\":{\"qExpr\":\"= &lt;label&gt;\"}_\nWhere:\n* &lt; _label_ &gt; is the label of the _Others_ group.",
          "$ref": "#/definitions/StringExpr"
        },
        "qTotalLabel": {
          "type": "object",
          "description": "If this property is set, the total of the calculated values is returned.\nThe default label is _Total_ .\nExample:\n_\"qTotalLabel\":\"= &lt;label&gt;\"_\nor\n_\"qTotalLabel\":{\"qExpr\":\"= &lt;label&gt;\"}_\nWhere:\n* &lt; _label_ &gt; is the label of the _Total_ group.",
          "$ref": "#/definitions/StringExpr"
        },
        "qCalcCond": {
          "type": "object",
          "description": "Specifies a calculation condition, which must be fulfilled for the dimension to be calculated.\nIf the calculation condition is not met, the dimension is excluded from the calculation.\nBy default, there is no calculation condition.\nThis property is optional.",
          "$ref": "#/definitions/ValueExpr"
        },
        "qAttributeExpressions": {
          "type": "array",
          "description": "List of attribute expressions.",
          "items": {
            "$ref": "#/definitions/NxAttrExprDef"
          }
        },
        "qAttributeDimensions": {
          "type": "array",
          "description": "List of attribute dimensions.",
          "items": {
            "$ref": "#/definitions/NxAttrDimDef"
          }
        },
        "qCalcCondition": {
          "type": "object",
          "description": "Specifies a calculation condition object.\nIf CalcCondition.Cond is not fulfilled, the dimension is excluded from the calculation and CalcCondition.Msg is evaluated.\nBy default, there is no calculation condition.\nThis property is optional.",
          "$ref": "#/definitions/NxCalcCond"
        }
      }
    },
    "NxInlineDimensionDef": {
      "type": "object",
      "properties": {
        "qGrouping": {
          "type": "string",
          "description": "Used to define a cyclic group or drill-down group.\nDefault value is no grouping.\nThis parameter is optional.\n\nOne of:\n* N or GRP_NX_NONE\n* H or GRP_NX_HIEARCHY\n* C or GRP_NX_COLLECTION",
          "enum": [
            "GRP_NX_NONE",
            "GRP_NX_HIEARCHY",
            "GRP_NX_COLLECTION"
          ]
        },
        "qFieldDefs": {
          "type": "array",
          "description": "Array of field names.\nWhen creating a grouped dimension, more than one field name is defined.\nThis parameter is optional.",
          "items": {
            "type": "string"
          }
        },
        "qFieldLabels": {
          "type": "array",
          "description": "Array of field labels.\nThis parameter is optional.",
          "items": {
            "type": "string"
          }
        },
        "qSortCriterias": {
          "type": "array",
          "description": "Defines the sorting criteria in the field.\nDefault is to sort by alphabetical order, ascending.\nThis parameter is optional.",
          "items": {
            "$ref": "#/definitions/SortCriteria"
          }
        },
        "qNumberPresentations": {
          "type": "array",
          "description": "Defines the format of the value.\nThis parameter is optional.",
          "items": {
            "$ref": "#/definitions/FieldAttributes"
          }
        },
        "qReverseSort": {
          "type": "boolean",
          "description": "If set to true, it inverts the sort criteria in the field."
        },
        "qActiveField": {
          "type": "integer",
          "description": "Index of the active field in a cyclic dimension.\nThis parameter is optional. The default value is 0.\nThis parameter is used in case of cyclic dimensions ( _qGrouping_ is C).",
          "format": "int32"
        },
        "qLabelExpression": {
          "type": "string",
          "description": "Label expression.\nThis parameter is optional."
        }
      }
    },
    "SortCriteria": {
      "type": "object",
      "properties": {
        "qSortByState": {
          "type": "integer",
          "description": "Sorts the field values according to their logical state (selected, optional, alternative or excluded).",
          "format": "int8"
        },
        "qSortByFrequency": {
          "type": "integer",
          "description": "Sorts the field values by frequency (number of occurrences in the field).",
          "format": "int8"
        },
        "qSortByNumeric": {
          "type": "integer",
          "description": "Sorts the field values by numeric value.",
          "format": "int8"
        },
        "qSortByAscii": {
          "type": "integer",
          "description": "Sorts the field by alphabetical order.",
          "format": "int8"
        },
        "qSortByLoadOrder": {
          "type": "integer",
          "description": "Sorts the field values by the initial load order.",
          "format": "int8"
        },
        "qSortByExpression": {
          "type": "integer",
          "description": "Sorts the field by expression.",
          "format": "int8"
        },
        "qExpression": {
          "type": "object",
          "description": "Sort by expression.",
          "$ref": "#/definitions/ValueExpr"
        },
        "qSortByGreyness": {
          "type": "integer",
          "format": "int8"
        }
      }
    },
    "ValueExpr": {
      "type": "object",
      "properties": {
        "qv": {
          "type": "string"
        }
      }
    },
    "OtherTotalSpecProp": {
      "type": "object",
      "properties": {
        "qOtherMode": {
          "type": "string",
          "description": "Determines how many dimension values are displayed.\nThe default value is _OTHER_OFF_ .\n\nOne of:\n* OTHER_OFF\n* OTHER_COUNTED\n* OTHER_ABS_LIMITED\n* OTHER_ABS_ACC_TARGET\n* OTHER_REL_LIMITED\n* OTHER_REL_ACC_TARGET",
          "default": "OTHER_OFF",
          "enum": [
            "OTHER_OFF",
            "OTHER_COUNTED",
            "OTHER_ABS_LIMITED",
            "OTHER_ABS_ACC_TARGET",
            "OTHER_REL_LIMITED",
            "OTHER_REL_ACC_TARGET"
          ]
        },
        "qOtherCounted": {
          "type": "object",
          "description": "Number of values to display. The number of values can be entered as a calculated formula.\nThis parameter is used when _qOtherMode_ is set to _OTHER_COUNTED_ .",
          "$ref": "#/definitions/ValueExpr"
        },
        "qOtherLimit": {
          "type": "object",
          "description": "Value used to limit the dimension values. The limit can be entered as a calculated formula.\nThis parameter is used when _qOtherMode_ is set to:\n* OTHER_ABS_LIMITED\n* OTHER_REL_LIMITED\n* OTHER_ABS_ACC_TARGET\nOTHER_REL_ACC_TARGET",
          "$ref": "#/definitions/ValueExpr"
        },
        "qOtherLimitMode": {
          "type": "string",
          "description": "Sets the limit for the _Others_ mode.\nThis parameter is used when _qOtherMode_ is set to:\n* OTHER_ABS_LIMITED\n* OTHER_REL_LIMITED\n* OTHER_ABS_ACC_TARGET\nOTHER_REL_ACC_TARGET\n\nOne of:\n* OTHER_GE_LIMIT\n* OTHER_LE_LIMIT\n* OTHER_GT_LIMIT\n* OTHER_LT_LIMIT",
          "default": "OTHER_GT_LIMIT",
          "enum": [
            "OTHER_GE_LIMIT",
            "OTHER_LE_LIMIT",
            "OTHER_GT_LIMIT",
            "OTHER_LT_LIMIT"
          ]
        },
        "qSuppressOther": {
          "type": "boolean",
          "description": "If set to true, the group _Others_ is not displayed as a dimension value.\nThe default value is false.",
          "default": false
        },
        "qForceBadValueKeeping": {
          "type": "boolean",
          "description": "This parameter is used when _qOtherMode_ is set to:\n* OTHER_ABS_LIMITED\n* OTHER_REL_LIMITED\n* OTHER_ABS_ACC_TARGET\nOTHER_REL_ACC_TARGET\n\nand when the dimension values include not numeric values.\nSet this parameter to true to include text values in the returned values.\nThe default value is true.",
          "default": true
        },
        "qApplyEvenWhenPossiblyWrongResult": {
          "type": "boolean",
          "description": "Set this parameter to true to allow the calculation of _Others_ even if the engine detects some potential mistakes.\nFor example the country Russia is part of the continent Europe and Asia. If you have an hypercube with two dimensions Country and Continent and one measure Population, the engine can detect that the population of Russia is included in both the continent Asia and Europe.\nThe default value is true.",
          "default": true
        },
        "qGlobalOtherGrouping": {
          "type": "boolean",
          "description": "This parameter applies to inner dimensions.\nIf this parameter is set to true, the restrictions are calculated on the selected dimension only. All previous dimensions are ignored.\nThe default value is false.",
          "default": false
        },
        "qOtherCollapseInnerDimensions": {
          "type": "boolean",
          "description": "If set to true, it collapses the inner dimensions (if any) in the group _Others_ .\nThe default value is false.",
          "default": false
        },
        "qOtherSortMode": {
          "type": "string",
          "description": "Defines the sort order of the dimension values.\nThe default value is _OTHER_SORT_DESCENDING_ .\n\nOne of:\n* OTHER_SORT_DEFAULT\n* OTHER_SORT_DESCENDING\n* OTHER_SORT_ASCENDING",
          "default": "OTHER_SORT_DESCENDING",
          "enum": [
            "OTHER_SORT_DEFAULT",
            "OTHER_SORT_DESCENDING",
            "OTHER_SORT_ASCENDING"
          ]
        },
        "qTotalMode": {
          "type": "string",
          "description": "If set to _TOTAL_EXPR_ , the total of the dimension values is returned.\nThe default value is _TOTAL_OFF_ .\n\nOne of:\n* TOTAL_OFF\n* TOTAL_EXPR",
          "default": "TOTAL_OFF",
          "enum": [
            "TOTAL_OFF",
            "TOTAL_EXPR"
          ]
        },
        "qReferencedExpression": {
          "type": "object",
          "description": "This parameter applies when there are several measures.\nName of the measure to use for the calculation of _Others_ for a specific dimension.",
          "$ref": "#/definitions/StringExpr"
        }
      }
    },
    "StringExpr": {
      "type": "object",
      "properties": {
        "qv": {
          "type": "string"
        }
      }
    },
    "NxAttrExprDef": {
      "type": "object",
      "properties": {
        "qExpression": {
          "type": "string",
          "description": "Definition of the attribute expression.\nExample: _\"Max(OrderID)\"_"
        },
        "qLibraryId": {
          "type": "string",
          "description": "Definition of the attribute expression stored in the library.\nExample: _\"MyGenericMeasure\"_"
        },
        "qAttribute": {
          "type": "boolean",
          "description": "If set to true, this measure will not affect the number of rows in the cube."
        }
      }
    },
    "NxAttrDimDef": {
      "type": "object",
      "description": "Layout for _NxAttrDimDef_.",
      "properties": {
        "qDef": {
          "type": "string",
          "description": "Expression or field name."
        },
        "qLibraryId": {
          "type": "string",
          "description": "LibraryId for dimension."
        },
        "qSortBy": {
          "type": "object",
          "description": "Sorting.",
          "$ref": "#/definitions/SortCriteria"
        },
        "qAttribute": {
          "type": "boolean",
          "description": "If set to true, this attribute will not affect the number of rows in the cube."
        }
      }
    },
    "NxCalcCond": {
      "type": "object",
      "properties": {
        "qCond": {
          "type": "object",
          "description": "Condition for calculating an hypercube, dimension or measure.",
          "$ref": "#/definitions/ValueExpr"
        },
        "qMsg": {
          "type": "object",
          "description": "Evaluated if Cond is not fullfilled.",
          "$ref": "#/definitions/StringExpr"
        }
      }
    },
    "NxMeasure": {
      "type": "object",
      "description": "<div class=note>Either **qDef** or **qLibraryId** must be set, but not both. </div> <div class=note>If the measure is set in the hypercube and not in the library, this measure cannot be shared with other objects.</div> <div class=note>A measure that is set in the library can be used by many objects.</div> <div class=note>\nexpressions are complementary expressions associated to a measure. For example, you can decide to change the background color of a visualization depending on the values of the measure.\nAttribute expressions do not affect the layout of an object. The sorting order is unchanged.\n</div>",
      "properties": {
        "qLibraryId": {
          "type": "string",
          "description": "Refers to a measure stored in the library."
        },
        "qDef": {
          "type": "object",
          "description": "Refers to a measure stored in the hypercube.",
          "$ref": "#/definitions/NxInlineMeasureDef"
        },
        "qSortBy": {
          "type": "object",
          "description": "Defines the sort criteria.\nThe default value is sort by ascending alphabetic order.\nThis property is optional.",
          "$ref": "#/definitions/SortCriteria"
        },
        "qAttributeExpressions": {
          "type": "array",
          "description": "List of attribute expressions.",
          "items": {
            "$ref": "#/definitions/NxAttrExprDef"
          }
        },
        "qAttributeDimensions": {
          "type": "array",
          "description": "List of attribute dimensions.",
          "items": {
            "$ref": "#/definitions/NxAttrDimDef"
          }
        },
        "qCalcCond": {
          "type": "object",
          "description": "Specifies a calculation condition, which must be fulfilled for the measure to be calculated.\nIf the calculation condition is not met, the measure is excluded from the calculation.\nBy default, there is no calculation condition.\nThis property is optional.",
          "$ref": "#/definitions/ValueExpr"
        },
        "qCalcCondition": {
          "type": "object",
          "description": "Specifies a calculation condition object.\nIf CalcCondition.Cond is not fulfilled, the measure is excluded from the calculation and CalcCondition.Msg is evaluated.\nBy default, there is no calculation condition.\nThis property is optional.",
          "$ref": "#/definitions/NxCalcCond"
        }
      }
    },
    "NxInlineMeasureDef": {
      "type": "object",
      "properties": {
        "qLabel": {
          "type": "string",
          "description": "Name of the measure.\nAn empty string is returned as a default value.\nThis parameter is optional."
        },
        "qDescription": {
          "type": "string",
          "description": "Description of the measure.\nAn empty string is returned as a default value.\nThis parameter is optional."
        },
        "qTags": {
          "type": "array",
          "description": "Name connected to the measure that is used for search purposes.\nA measure can have several tags.\nThis parameter is optional.",
          "items": {
            "type": "string"
          }
        },
        "qGrouping": {
          "type": "string",
          "description": "Default value is no grouping.\nThis parameter is optional.\n\nOne of:\n* N or GRP_NX_NONE\n* H or GRP_NX_HIEARCHY\n* C or GRP_NX_COLLECTION",
          "enum": [
            "GRP_NX_NONE",
            "GRP_NX_HIEARCHY",
            "GRP_NX_COLLECTION"
          ]
        },
        "qDef": {
          "type": "string",
          "description": "Definition of the expression in the measure.\nExample: _Sum (OrderTotal)_\nThis parameter is mandatory."
        },
        "qNumFormat": {
          "type": "object",
          "description": "Format of the field.\nThis parameter is optional.",
          "$ref": "#/definitions/FieldAttributes"
        },
        "qRelative": {
          "type": "boolean",
          "description": "If set to true, percentage values are returned instead of absolute numbers.\nDefault value is false.\nThis parameter is optional."
        },
        "qBrutalSum": {
          "type": "boolean",
          "description": "If set to true, the sum of rows total should be used rather than real expression total.\nThis parameter is optional and applies to straight tables.\nDefault value is false.\nIf using the Qlik Sense interface, it means that the total mode is set to **Expression Total** ."
        },
        "qAggrFunc": {
          "type": "string",
          "description": "Aggregate function.\nFor more information on the aggregate function syntax, see the section Working with Qlik Sense on the online help portal.\nThe default value is 0 (Sum of rows)\nThis parameter is optional."
        },
        "qAccumulate": {
          "type": "integer",
          "description": "* 0 means no accumulation\n                            * 1 means full accumulation (each y-value accumulates all previous y-values of the expression)\n                            * ≥ 2 means accumulate as many steps as the _qAccumulate_ value\nDefault value is 0.\nThis parameter is optional.",
          "format": "int32"
        },
        "qReverseSort": {
          "type": "boolean",
          "description": "If set to true, it inverts the sort criteria in the field."
        },
        "qActiveExpression": {
          "type": "integer",
          "description": "Index of the active expression in a cyclic measure. The indexing starts from 0.\nThe default value is 0.\nThis parameter is optional.",
          "format": "int32"
        },
        "qExpressions": {
          "type": "array",
          "description": "Array of expressions. This parameter is used in case of cyclic measures ( _qGrouping_ is C). List of the expressions in the cyclic group.",
          "items": {
            "type": "string"
          }
        },
        "qLabelExpression": {
          "type": "string",
          "description": "Label expression.\nThis parameter is optional."
        }
      }
    },
    "HyperCube": {
      "type": "object",
      "description": "Renders the properties of a hypercube. Is the layout for _HyperCubeDef_.\nFor more information about the definition of a hypercube, see _Generic object_.\n<div class=note>What is returned in HyperCube depends on the type of the hypercube (straight, pivot or stacked table, or tree) and on the method called (GetLayout, GetHyperCubeData, GetHyperCubePivotData, GetHyperCubeStackData, GetHyperCubeTreeData).</div>",
      "properties": {
        "qStateName": {
          "type": "string",
          "description": "Name of the alternate state.\nDefault is current selections _$_ ."
        },
        "qSize": {
          "type": "object",
          "description": "Defines the size of the hypercube.",
          "$ref": "#/definitions/Size"
        },
        "qError": {
          "type": "object",
          "description": "This parameter is optional and is displayed in case of error.",
          "$ref": "#/definitions/NxValidationError"
        },
        "qDimensionInfo": {
          "type": "array",
          "description": "Information on the dimension.",
          "items": {
            "$ref": "#/definitions/NxDimensionInfo"
          }
        },
        "qMeasureInfo": {
          "type": "array",
          "description": "Information on the measure.",
          "items": {
            "$ref": "#/definitions/NxMeasureInfo"
          }
        },
        "qEffectiveInterColumnSortOrder": {
          "type": "array",
          "description": "Sort order of the columns in the hypercube.\nColumn numbers are separated by a comma.\nExample: [1,0,2] means that the first column to be sorted was the column 1, followed by the column 0 and the column 2.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "qGrandTotalRow": {
          "type": "array",
          "description": "Aggregate for measures of all values in the field.\nThe result value depends on the _qAggrFunc_ defined in _HyperCubeDef_.",
          "items": {
            "$ref": "#/definitions/NxCell"
          }
        },
        "qDataPages": {
          "type": "array",
          "description": "Set of data.\nIs empty if nothing has been defined in **qInitialDataFetch** in _HyperCubeDef_.",
          "items": {
            "$ref": "#/definitions/NxDataPage"
          }
        },
        "qPivotDataPages": {
          "type": "array",
          "description": "Set of data for pivot tables.\nIs empty if nothing has been defined in **qInitialDataFetch** in _HyperCubeDef_.",
          "items": {
            "$ref": "#/definitions/NxPivotPage"
          }
        },
        "qStackedDataPages": {
          "type": "array",
          "description": "Set of data for stacked tables.\nIs empty if nothing has been defined in **qInitialDataFetch** in _HyperCubeDef_.",
          "items": {
            "$ref": "#/definitions/NxStackPage"
          }
        },
        "qMode": {
          "type": "string",
          "description": "Information about the mode of the visualization.\n\nOne of:\n* S or DATA_MODE_STRAIGHT\n* P or DATA_MODE_PIVOT\n* K or DATA_MODE_PIVOT_STACK\n* T or DATA_MODE_TREE",
          "enum": [
            "DATA_MODE_STRAIGHT",
            "DATA_MODE_PIVOT",
            "DATA_MODE_PIVOT_STACK",
            "DATA_MODE_TREE"
          ]
        },
        "qNoOfLeftDims": {
          "type": "integer",
          "description": "Number of left dimensions.\nDefault value is -1.\nThe index related to each left dimension depends on the position of the pseudo dimension (if any).\nFor example, a pivot table with:\n* Four dimensions in the following order: Country, City, Product and Category\n* One pseudo dimension in position 1\n* Three left dimensions.\n\nimplies that:\n* The index 0 corresponds to the left dimension Country.\n* The index 1 corresponds to the pseudo dimension.\n* The index 2 corresponds to the left dimension City.\n* Product and Category are top dimensions.\n\nAnother example:\n* Four dimensions in the following order: Country, City, Product and Category.\n* One pseudo dimension in position -1.\n* Three left dimensions.\n\nimplies that:\n* The index -1 corresponds to the pseudo dimension; the pseudo dimension is the most to the right.\n* The index 0 corresponds to the left dimension Country.\n* The index 1 corresponds to the left dimension City.\n* The index 2 corresponds to the left dimension Product.\n* Category is a top dimension.",
          "format": "int32"
        },
        "qIndentMode": {
          "type": "boolean",
          "description": "Is used for pivot tables only.\nIf set to true, the formatting of the results is slightly different.\nThis property is optional."
        },
        "qLastExpandedPos": {
          "type": "object",
          "description": "Is used for pivot tables only.\nPosition of the last expended cell.\nThis property is optional.",
          "$ref": "#/definitions/NxCellPosition"
        },
        "qHasOtherValues": {
          "type": "boolean",
          "description": "True if other row exists."
        },
        "qTitle": {
          "type": "string",
          "description": "Title of the hypercube, for example the title of a chart."
        },
        "qTreeNodesOnDim": {
          "type": "array",
          "description": "The total number of nodes on each dimension (only applicable when _qMode = T_ ).",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "qCalcCondMsg": {
          "type": "string",
          "description": "The message displayed if calculation condition is not fulfilled."
        },
        "qColumnOrder": {
          "type": "array",
          "description": "The order of the columns.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "Size": {
      "type": "object",
      "properties": {
        "qcx": {
          "type": "integer",
          "description": "Number of pixels on the _x_ axis.",
          "format": "int32"
        },
        "qcy": {
          "type": "integer",
          "description": "Number of pixels on the _y_ axis.",
          "format": "int32"
        }
      }
    },
    "NxValidationError": {
      "type": "object",
      "properties": {
        "qErrorCode": {
          "type": "integer",
          "description": "Error code.\nThis parameter is always displayed in case of error.",
          "format": "int32"
        },
        "qContext": {
          "type": "string",
          "description": "Context related to the error, from the user app domain.\nIt can be the identifier of an object, a field name, a table name.\nThis parameter is optional."
        },
        "qExtendedMessage": {
          "type": "string",
          "description": "Internal information from the server.\nThis parameter is optional."
        }
      }
    },
    "NxDimensionInfo": {
      "type": "object",
      "properties": {
        "qFallbackTitle": {
          "type": "string",
          "description": "Corresponds to the label of the dimension that is selected.\nIf the label is not defined then the field name is used."
        },
        "qApprMaxGlyphCount": {
          "type": "integer",
          "description": "Length of the longest value in the field.",
          "format": "int32"
        },
        "qCardinal": {
          "type": "integer",
          "description": "Number of distinct field values.",
          "format": "int32"
        },
        "qLocked": {
          "type": "boolean",
          "description": "Is set to true if the field is locked."
        },
        "qSortIndicator": {
          "type": "string",
          "description": "Sort indicator.\nThe default value is no sorting.\nThis parameter is optional.\n\nOne of:\n* N or NX_SORT_INDICATE_NONE\n* A or NX_SORT_INDICATE_ASC\n* D or NX_SORT_INDICATE_DESC",
          "enum": [
            "NX_SORT_INDICATE_NONE",
            "NX_SORT_INDICATE_ASC",
            "NX_SORT_INDICATE_DESC"
          ]
        },
        "qGroupFallbackTitles": {
          "type": "array",
          "description": "Array of dimension labels.\nContains the labels of all dimensions in a hierarchy group (for example the labels of all dimensions in a drill down group).",
          "items": {
            "type": "string"
          }
        },
        "qGroupPos": {
          "type": "integer",
          "description": "Index of the dimension that is currently in use.\n_qGroupPos_ is set to 0 if there are no hierarchical groups (drill-down groups) or cycle groups.",
          "format": "int32"
        },
        "qStateCounts": {
          "type": "object",
          "description": "Number of values in a particular state.",
          "$ref": "#/definitions/NxStateCounts"
        },
        "qTags": {
          "type": "array",
          "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII",
          "items": {
            "type": "string"
          }
        },
        "qError": {
          "type": "object",
          "description": "This parameter is optional.\nGives information on the error.",
          "$ref": "#/definitions/NxValidationError"
        },
        "qDimensionType": {
          "type": "string",
          "description": "Binary format of the field.\n\nOne of:\n* D or NX_DIMENSION_TYPE_DISCRETE\n* N or NX_DIMENSION_TYPE_NUMERIC\n* T or NX_DIMENSION_TYPE_TIME",
          "enum": [
            "NX_DIMENSION_TYPE_DISCRETE",
            "NX_DIMENSION_TYPE_NUMERIC",
            "NX_DIMENSION_TYPE_TIME"
          ]
        },
        "qReverseSort": {
          "type": "boolean",
          "description": "If set to true, it inverts the sort criteria in the field."
        },
        "qGrouping": {
          "type": "string",
          "description": "Defines the grouping.\n\nOne of:\n* N or GRP_NX_NONE\n* H or GRP_NX_HIEARCHY\n* C or GRP_NX_COLLECTION",
          "enum": [
            "GRP_NX_NONE",
            "GRP_NX_HIEARCHY",
            "GRP_NX_COLLECTION"
          ]
        },
        "qIsSemantic": {
          "type": "boolean",
          "description": "If set to true, it means that the field is a semantic."
        },
        "qIsOneAndOnlyOne": {
          "type": "boolean",
          "description": "If set to true, it means that the field always has one and only one selected value."
        },
        "qNumFormat": {
          "type": "object",
          "description": "Format of the field.\nThis parameter is optional.",
          "$ref": "#/definitions/FieldAttributes"
        },
        "qIsAutoFormat": {
          "type": "boolean",
          "description": "This parameter is set to true if _qNumFormat_ is set to _U_ (unknown). The engine guesses the type of the field based on the field's definition."
        },
        "qGroupFieldDefs": {
          "type": "array",
          "description": "Array of field names.",
          "items": {
            "type": "string"
          }
        },
        "qMin": {
          "type": "number",
          "description": "Minimum value.",
          "format": "double"
        },
        "qMax": {
          "type": "number",
          "description": "Maximum value.",
          "format": "double"
        },
        "qContinuousAxes": {
          "type": "boolean",
          "description": "Is continuous axis used."
        },
        "qIsCyclic": {
          "type": "boolean",
          "description": "Is a cyclic dimension used."
        },
        "qDerivedField": {
          "type": "boolean",
          "description": "Is derived field is used as a dimension."
        },
        "qAttrExprInfo": {
          "type": "array",
          "description": "Array of attribute expressions.",
          "items": {
            "$ref": "#/definitions/NxAttrExprInfo"
          }
        },
        "qAttrDimInfo": {
          "type": "array",
          "description": "Array of attribute dimensions.",
          "items": {
            "$ref": "#/definitions/NxAttrDimInfo"
          }
        },
        "qCalcCondMsg": {
          "type": "string",
          "description": "The message displayed if calculation condition is not fulfilled."
        },
        "qIsCalculated": {
          "type": "boolean",
          "description": "True if this is a calculated dimension.",
          "default": false
        }
      }
    },
    "NxStateCounts": {
      "type": "object",
      "properties": {
        "qLocked": {
          "type": "integer",
          "description": "Number of values in locked state.",
          "format": "int32"
        },
        "qSelected": {
          "type": "integer",
          "description": "Number of values in selected state.",
          "format": "int32"
        },
        "qOption": {
          "type": "integer",
          "description": "Number of values in optional state.",
          "format": "int32"
        },
        "qDeselected": {
          "type": "integer",
          "description": "Number of values in deselected state.",
          "format": "int32"
        },
        "qAlternative": {
          "type": "integer",
          "description": "Number of values in alternative state.",
          "format": "int32"
        },
        "qExcluded": {
          "type": "integer",
          "description": "Number of values in excluded state.",
          "format": "int32"
        },
        "qSelectedExcluded": {
          "type": "integer",
          "description": "Number of values in selected excluded state.",
          "format": "int32"
        },
        "qLockedExcluded": {
          "type": "integer",
          "description": "Number of values in locked excluded state.",
          "format": "int32"
        }
      }
    },
    "NxAttrExprInfo": {
      "type": "object",
      "description": "Layout for _NxAttrExprDef_.",
      "properties": {
        "qMin": {
          "type": "number",
          "description": "Minimum value.",
          "format": "double"
        },
        "qMax": {
          "type": "number",
          "description": "Maximum value.",
          "format": "double"
        },
        "qFallbackTitle": {
          "type": "string"
        },
        "qMinText": {
          "type": "string",
          "description": "String version of the minimum Value."
        },
        "qMaxText": {
          "type": "string",
          "description": "String version of the maximum Value."
        }
      }
    },
    "NxAttrDimInfo": {
      "type": "object",
      "description": "Layout for _NxAttrDimDef_.",
      "properties": {
        "qCardinal": {
          "type": "integer",
          "description": "Cardinality of the attribute expression.",
          "format": "int32"
        },
        "qSize": {
          "type": "object",
          "description": "Number of rows.",
          "$ref": "#/definitions/Size"
        },
        "qFallbackTitle": {
          "type": "string",
          "description": "The title for the attribute dimension."
        },
        "qLocked": {
          "type": "boolean",
          "description": "The Locked value of the dimension."
        },
        "qError": {
          "type": "object",
          "description": "Validation error.",
          "$ref": "#/definitions/NxValidationError"
        },
        "qIsCalculated": {
          "type": "boolean",
          "description": "True if this is a calculated dimension.",
          "default": false
        }
      }
    },
    "NxMeasureInfo": {
      "type": "object",
      "description": "Layout for _NxInlineMeasureDef_.",
      "properties": {
        "qFallbackTitle": {
          "type": "string",
          "description": "Corresponds to the label of the measure.\nIf the label is not defined then the measure name is used."
        },
        "qApprMaxGlyphCount": {
          "type": "integer",
          "description": "Length of the longest value in the field.",
          "format": "int32"
        },
        "qCardinal": {
          "type": "integer",
          "description": "Number of distinct field values.",
          "format": "int32"
        },
        "qSortIndicator": {
          "type": "string",
          "description": "Sort indicator.\nThe default value is no sorting.\nThis parameter is optional.\n\nOne of:\n* N or NX_SORT_INDICATE_NONE\n* A or NX_SORT_INDICATE_ASC\n* D or NX_SORT_INDICATE_DESC",
          "enum": [
            "NX_SORT_INDICATE_NONE",
            "NX_SORT_INDICATE_ASC",
            "NX_SORT_INDICATE_DESC"
          ]
        },
        "qNumFormat": {
          "type": "object",
          "description": "Format of the field.\nThis parameter is optional.",
          "$ref": "#/definitions/FieldAttributes"
        },
        "qMin": {
          "type": "number",
          "description": "Lowest value in the range.",
          "format": "double"
        },
        "qMax": {
          "type": "number",
          "description": "Highest value in the range.",
          "format": "double"
        },
        "qError": {
          "type": "object",
          "description": "This parameter is optional.\nGives information on the error.",
          "$ref": "#/definitions/NxValidationError"
        },
        "qReverseSort": {
          "type": "boolean",
          "description": "If set to true, it inverts the sort criteria in the field."
        },
        "qIsAutoFormat": {
          "type": "boolean",
          "description": "This parameter is set to true if _qNumFormat_ is set to _U_ (unknown). The engine guesses the type of the field based on the field's expression."
        },
        "qAttrExprInfo": {
          "type": "array",
          "description": "List of attribute expressions.",
          "items": {
            "$ref": "#/definitions/NxAttrExprInfo"
          }
        },
        "qAttrDimInfo": {
          "type": "array",
          "description": "List of attribute dimensions.",
          "items": {
            "$ref": "#/definitions/NxAttrDimInfo"
          }
        },
        "qCalcCondMsg": {
          "type": "string",
          "description": "The message displayed if calculation condition is not fulfilled."
        }
      }
    },
    "NxCellPosition": {
      "type": "object",
      "properties": {
        "qx": {
          "type": "integer",
          "description": "Position of the cell on the x-axis.",
          "format": "int32"
        },
        "qy": {
          "type": "integer",
          "description": "Position of the cell on the y-axis.",
          "format": "int32"
        }
      }
    },
    "LayoutExclude": {
      "type": "object"
    },
    "ListObjectDef": {
      "type": "object",
      "description": "Defines the properties of a list object.\nFor more information about the definition of a list object, see _Generic object_.",
      "properties": {
        "qStateName": {
          "type": "string",
          "description": "Name of the alternate state.\nDefault is current selections _$_ ."
        },
        "qLibraryId": {
          "type": "string",
          "description": "Refers to a dimension stored in the library."
        },
        "qDef": {
          "type": "object",
          "description": "Refers to a dimension stored in the list object.",
          "$ref": "#/definitions/NxInlineDimensionDef"
        },
        "qAutoSortByState": {
          "type": "object",
          "description": "Defines the sorting by state.",
          "$ref": "#/definitions/NxAutoSortByStateDef"
        },
        "qFrequencyMode": {
          "type": "string",
          "description": "Defines the frequency mode. The frequency mode is used to calculate the frequency of a value in a list object.\nDefault is _NX_FREQUENCY_NONE_ .\nThis parameter is optional.\n\nOne of:\n* N or NX_FREQUENCY_NONE\n* V or NX_FREQUENCY_VALUE\n* P or NX_FREQUENCY_PERCENT\n* R or NX_FREQUENCY_RELATIVE",
          "default": "NX_FREQUENCY_NONE",
          "enum": [
            "NX_FREQUENCY_NONE",
            "NX_FREQUENCY_VALUE",
            "NX_FREQUENCY_PERCENT",
            "NX_FREQUENCY_RELATIVE"
          ]
        },
        "qShowAlternatives": {
          "type": "boolean",
          "description": "If set to true, alternative values are allowed in _qData_ .\nIf set to false, no alternative values are displayed in _qData_ . Values are excluded instead.\nThe default value is false.\nNote that on the contrary, the _qStateCounts_ parameter counts the excluded values as alternative values.\nThis parameter is optional."
        },
        "qInitialDataFetch": {
          "type": "array",
          "description": "Fetches an initial data set.",
          "items": {
            "$ref": "#/definitions/NxPage"
          }
        },
        "qExpressions": {
          "type": "array",
          "description": "Lists the expressions in the list object.\nThis parameter is optional.",
          "items": {
            "$ref": "#/definitions/NxListObjectExpressionDef"
          }
        }
      },
      "x-qlik-see-also": [
        "[Create a list object](#csh-create-listObject)",
        "[Get the layout of a generic object](#csh-get-layout-generic-object)",
        "[ListObject](#csh-ListObject)"
      ]
    },
    "NxAutoSortByStateDef": {
      "type": "object",
      "properties": {
        "qDisplayNumberOfRows": {
          "type": "integer",
          "description": "This parameter applies to list objects.\nIf the number of selected values in the list object is greater than the value set in _qDisplayNumberOfRows_ , the selected lines are promoted at the top of the list object.\nIf _qDisplayNumberOfRows_ is set to a negative value or to 0, the sort by state is disabled.",
          "format": "int32"
        }
      }
    },
    "NxListObjectExpressionDef": {
      "type": "object",
      "properties": {
        "qExpr": {
          "type": "string",
          "description": "Value of the expression."
        },
        "qLibraryId": {
          "type": "string",
          "description": "Refers to an expression stored in the library."
        }
      }
    },
    "ListObject": {
      "type": "object",
      "description": "Renders the properties of a list object. Is the layout for _ListObjectDef_.\nFor more information about the definition of a list object, see _Generic object_.\n<div class=note>ListObject is used by the _GetLayout Method_ to display the properties of a list object. </div>",
      "properties": {
        "qStateName": {
          "type": "string",
          "description": "Name of the alternate state.\nDefault is current selections _$_ ."
        },
        "qSize": {
          "type": "object",
          "description": "Defines the size of a list object.",
          "$ref": "#/definitions/Size"
        },
        "qError": {
          "type": "object",
          "description": "This parameter is optional and is displayed in case of error.",
          "$ref": "#/definitions/NxValidationError"
        },
        "qDimensionInfo": {
          "type": "object",
          "description": "Information about the dimension.",
          "$ref": "#/definitions/NxDimensionInfo"
        },
        "qExpressions": {
          "type": "array",
          "description": "Lists the expressions in the list object.",
          "items": {
            "$ref": "#/definitions/NxListObjectExpression"
          }
        },
        "qDataPages": {
          "type": "array",
          "description": "Set of data.\nIs empty if nothing has been defined in **qInitialDataFetch** in _ListObjectDef_.",
          "items": {
            "$ref": "#/definitions/NxDataPage"
          }
        }
      }
    },
    "NxListObjectExpression": {
      "type": "object",
      "properties": {
        "qExpr": {
          "type": "string",
          "description": "Value of the expression."
        },
        "qError": {
          "type": "object",
          "description": "Gives information on the error.\nThis parameter is optional.",
          "$ref": "#/definitions/NxLayoutErrors"
        }
      }
    },
    "MeasureListDef": {
      "type": "object",
      "description": "Defines the list of measures.",
      "properties": {
        "qType": {
          "type": "string",
          "description": "Type of the list."
        },
        "qData": {
          "type": "object",
          "description": "Data",
          "$ref": "#/definitions/JsonObject"
        }
      },
      "x-qlik-see-also": [
        "[Get the list of measures in an app](#csh-list-measures-in-app)",
        "[MeasureList](#csh-MeasureList)"
      ]
    },
    "MeasureList": {
      "type": "object",
      "description": "Lists the measures. Is the layout for _MeasureListDef_.",
      "properties": {
        "qItems": {
          "type": "array",
          "description": "Information about the list of measures.",
          "items": {
            "$ref": "#/definitions/NxContainerEntry"
          }
        }
      }
    },
    "MediaListDef": {
      "type": "object",
      "description": "Defines the list of media files.\n<div class=note>This struct is deprecated.</div>\n\n### Properties\n\"qMediaListDef\": {}\n_qMediaListDef_ has an empty structure. No properties need to be set.",
      "x-qlik-see-also": [
        "[MediaList](#csh-MediaList)"
      ]
    },
    "MediaList": {
      "type": "object",
      "description": "Lists the media files. Is the layout for _MediaListDef_.\n<div class=note>This struct is deprecated.</div>",
      "properties": {
        "qItems": {
          "type": "array",
          "description": "Information about the list of media files.\nIn Qlik Sense Desktop, the media files are retrieved from:\n_%userprofile%\\Documents\\Qlik\\Sense\\Content\\Default_\nIn Qlik Sense Enterprise, the media files are retrieved from:\n&lt;installation_directory&gt;\\Qlik\\Sense\\Repository\\Content\\Default\nThe default installation directory is _ProgramData_ .",
          "items": {
            "$ref": "#/definitions/MediaListItem"
          }
        }
      }
    },
    "MediaListItem": {
      "type": "object",
      "description": "<div class=note>In addition, this structure can return dynamic properties.</div>",
      "properties": {
        "qUrlDef": {
          "type": "string",
          "description": "Relative path to the media file. The URL is static.\nMedia files located:\n* in the _/content/default/_ folder are outside the qvf file.\n* in the _/media/ folder_ are embedded in the qvf file."
        },
        "qUrl": {
          "type": "string",
          "description": "Relative path to the media file.\nMedia files located:\n* in the _/content/default/_ folder are outside the qvf file.\n* in the _/media/ folder_ are embedded in the qvf file."
        }
      }
    },
    "NxLibraryDimensionDef": {
      "type": "object",
      "properties": {
        "qGrouping": {
          "type": "string",
          "description": "Information about the grouping.\n\nOne of:\n* N or GRP_NX_NONE\n* H or GRP_NX_HIEARCHY\n* C or GRP_NX_COLLECTION",
          "enum": [
            "GRP_NX_NONE",
            "GRP_NX_HIEARCHY",
            "GRP_NX_COLLECTION"
          ]
        },
        "qFieldDefs": {
          "type": "array",
          "description": "Array of dimension names.",
          "items": {
            "type": "string"
          }
        },
        "qFieldLabels": {
          "type": "array",
          "description": "Array of dimension labels.",
          "items": {
            "type": "string"
          }
        },
        "qLabelExpression": {
          "type": "string"
        }
      }
    },
    "NxLibraryDimension": {
      "type": "object",
      "properties": {
        "qGrouping": {
          "type": "string",
          "description": "Information about the grouping.\n\nOne of:\n* N or GRP_NX_NONE\n* H or GRP_NX_HIEARCHY\n* C or GRP_NX_COLLECTION",
          "enum": [
            "GRP_NX_NONE",
            "GRP_NX_HIEARCHY",
            "GRP_NX_COLLECTION"
          ]
        },
        "qFieldDefs": {
          "type": "array",
          "description": "Array of dimension names.",
          "items": {
            "type": "string"
          }
        },
        "qFieldLabels": {
          "type": "array",
          "description": "Array of dimension labels.",
          "items": {
            "type": "string"
          }
        },
        "qLabelExpression": {
          "type": "string"
        }
      }
    },
    "NxLibraryMeasureDef": {
      "type": "object",
      "properties": {
        "qLabel": {
          "type": "string",
          "description": "Label of the measure."
        },
        "qDef": {
          "type": "string",
          "description": "Definition of the measure."
        },
        "qGrouping": {
          "type": "string",
          "description": "Used to define a cyclic group or drill-down group.\nDefault value is no grouping.\nThis parameter is optional.\n\nOne of:\n* N or GRP_NX_NONE\n* H or GRP_NX_HIEARCHY\n* C or GRP_NX_COLLECTION",
          "enum": [
            "GRP_NX_NONE",
            "GRP_NX_HIEARCHY",
            "GRP_NX_COLLECTION"
          ]
        },
        "qExpressions": {
          "type": "array",
          "description": "Array of expressions.",
          "items": {
            "type": "string"
          }
        },
        "qActiveExpression": {
          "type": "integer",
          "description": "Index to the active expression in a measure.",
          "format": "int32"
        },
        "qLabelExpression": {
          "type": "string"
        }
      }
    },
    "NxLibraryMeasure": {
      "type": "object",
      "properties": {
        "qLabel": {
          "type": "string"
        },
        "qDef": {
          "type": "string"
        },
        "qGrouping": {
          "type": "string",
          "description": "\nOne of:\n* N or GRP_NX_NONE\n* H or GRP_NX_HIEARCHY\n* C or GRP_NX_COLLECTION",
          "enum": [
            "GRP_NX_NONE",
            "GRP_NX_HIEARCHY",
            "GRP_NX_COLLECTION"
          ]
        },
        "qExpressions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "qActiveExpression": {
          "type": "integer",
          "format": "int32"
        },
        "qLabelExpression": {
          "type": "string"
        }
      }
    },
    "SelectionObjectDef": {
      "type": "object",
      "description": "To display the current selections.\nCan be added to any generic object but is particularly meaningful when using session objects to monitor an app.\n\n### Properties\n\"qSelectionObjectDef\": {}",
      "properties": {
        "qStateName": {
          "type": "string"
        }
      },
      "x-qlik-see-also": [
        "[Get the current selections](#csh-get-current-selections)",
        "[SelectionObject](#csh-SelectionObject)"
      ]
    },
    "SelectionObject": {
      "type": "object",
      "description": "Indicates which selections are currently applied. It gives the current selections. Is the layout for _SelectionObjectDef_.",
      "properties": {
        "qBackCount": {
          "type": "integer",
          "description": "Number of steps back.",
          "format": "int32"
        },
        "qForwardCount": {
          "type": "integer",
          "description": "Number of steps forward.",
          "format": "int32"
        },
        "qSelections": {
          "type": "array",
          "description": "Lists the fields that are selected.",
          "items": {
            "$ref": "#/definitions/NxCurrentSelectionItem"
          }
        }
      }
    },
    "NxCurrentSelectionItem": {
      "type": "object",
      "properties": {
        "qTotal": {
          "type": "integer",
          "description": "Number of values in the field.",
          "format": "int32"
        },
        "qIsNum": {
          "type": "boolean",
          "description": "This parameter is displayed if its value is true.\nIs set to true if the field is a numeric.\nThis parameter is optional."
        },
        "qField": {
          "type": "string",
          "description": "Name of the field that is selected."
        },
        "qLocked": {
          "type": "boolean",
          "description": "This parameter is displayed if its value is true.\nIs set to true if the field is locked.\nThis parameter is optional."
        },
        "qOneAndOnlyOne": {
          "type": "boolean",
          "description": "This parameter is displayed if its value is true.\nProperty that is set to a field. Is set to true if the field cannot be unselected.\nThis parameter is optional."
        },
        "qTextSearch": {
          "type": "string",
          "description": "Text that was used for the search. This parameter is filled when searching for a value and selecting it.\nThis parameter is optional."
        },
        "qSelectedCount": {
          "type": "integer",
          "description": "Number of values that are selected.",
          "format": "int32"
        },
        "qSelected": {
          "type": "string",
          "description": "Values that are selected."
        },
        "qRangeInfo": {
          "type": "array",
          "description": "Information about the range of selected values.\nIs empty if there is no range of selected values.",
          "items": {
            "$ref": "#/definitions/RangeSelectInfo"
          }
        },
        "qSortIndex": {
          "type": "integer",
          "description": "Sort index of the field. Indexing starts from 0.",
          "format": "int32"
        },
        "qStateCounts": {
          "type": "object",
          "description": "Number of values in a particular state.",
          "$ref": "#/definitions/NxStateCounts"
        },
        "qSelectedFieldSelectionInfo": {
          "type": "array",
          "description": "Information about the fields that are selected.",
          "items": {
            "$ref": "#/definitions/NxFieldSelectionInfo"
          }
        },
        "qNotSelectedFieldSelectionInfo": {
          "type": "array",
          "description": "Information about the fields that are not selected.",
          "items": {
            "$ref": "#/definitions/NxFieldSelectionInfo"
          }
        },
        "qSelectionThreshold": {
          "type": "integer",
          "description": "Maximum values to show in the current selections.\nThe default value is 6.",
          "format": "int32"
        },
        "qReadableName": {
          "type": "string",
          "description": "Label that, if defined, is displayed in current selections instead of the actual expression."
        },
        "qIsHidden": {
          "type": "boolean",
          "description": "Optional parameter. Indicates if the selection is to be hidden in the Selections bar.\nIs set to true if the current selection is hidden."
        }
      }
    },
    "NxFieldSelectionInfo": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the field."
        },
        "qFieldSelectionMode": {
          "type": "string",
          "description": "Selection mode.\n### Properties\nOne of:\n* NORMAL for a selection in normal mode.\n* AND for a selection in AND mode.\n* NOT for a selection NOT in AND mode.\nOne of:\n* NORMAL or SELECTION_MODE_NORMAL\n* AND or SELECTION_MODE_AND\n* NOT or SELECTION_MODE_NOT",
          "enum": [
            "SELECTION_MODE_NORMAL",
            "SELECTION_MODE_AND",
            "SELECTION_MODE_NOT"
          ]
        }
      }
    },
    "StaticContentUrlDef": {
      "type": "object",
      "description": "<div class=note>In addition, this structure can contain dynamic properties.</div>",
      "properties": {
        "qUrl": {
          "type": "string",
          "description": "Relative path of the thumbnail."
        }
      }
    },
    "StaticContentUrl": {
      "type": "object",
      "description": "<div class=note>In addition, this structure can return dynamic properties.</div>",
      "properties": {
        "qUrl": {
          "type": "string",
          "description": "Relative path of the thumbnail."
        }
      }
    },
    "StringExpression": {
      "type": "object",
      "description": "### Properties\nAbbreviated syntax:\n\"qStringExpression\":\"=&lt;expression&gt;\"\nExtended object syntax:\n\"qStringExpression\":{\"qExpr\":\"=&lt;expression&gt;\"}\nWhere:\n* &lt; **expression** &gt; is a string\n\n<div class=note>The \"=\" sign in the string expression is not mandatory. Even if the \"=\" sign is not given, the expression is evaluated.</div> <div class=note>A string expression is not evaluated, if the expression is surrounded by simple quotes.</div>\nThe result of the evaluation of the expression can be of any type, as it is returned as a JSON (quoted) string.",
      "properties": {
        "qExpr": {
          "type": "string"
        }
      }
    },
    "TreeDataDef": {
      "type": "object",
      "description": "Defines the properties of a TreeData object.\nFor more information about the definition of a TreeData object, see _Generic object_.",
      "properties": {
        "qStateName": {
          "type": "string",
          "description": "Name of the alternate state.\nDefault is current selections _$_ ."
        },
        "qDimensions": {
          "type": "array",
          "description": "Array of dimensions.",
          "items": {
            "$ref": "#/definitions/NxTreeDimensionDef"
          }
        },
        "qInterColumnSortOrder": {
          "type": "array",
          "description": "Defines the order of the dimension levels/columns in the TreeData object.\nColumn numbers are separated by a comma.\nExample: [1,0,2] means that the first level in the tree structure is dimension 1, followed by dimension 0 and dimension 2.\nThe default sort order is the order in which the dimensions and measures have been defined in the TreeDataDef.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "qSuppressZero": {
          "type": "boolean",
          "description": "Removes zero values.",
          "default": false
        },
        "qSuppressMissing": {
          "type": "boolean",
          "description": "Removes missing values.",
          "default": false
        },
        "qOpenFullyExpanded": {
          "type": "boolean",
          "description": "If this property is set to true, the cells are opened expanded. The default value is false.",
          "default": false
        },
        "qPopulateMissing": {
          "type": "boolean",
          "description": "If this property is set to true, the missing symbols (if any) are replaced by 0 if the value is a numeric and by an empty string if the value is a string.\nThe default value is false.",
          "default": false
        },
        "qCalcCondition": {
          "type": "object",
          "description": "Specifies a calculation condition object.\nIf CalcCondition.Cond is not fulfilled, the TreeData is excluded from the calculation and CalcCondition.Msg is evaluated.\nBy default, there is no calculation condition.\nThis property is optional.",
          "$ref": "#/definitions/NxCalcCond"
        },
        "qTitle": {
          "type": "object",
          "description": "Title of the TreeData object, for example the title of a chart.",
          "$ref": "#/definitions/StringExpr"
        }
      },
      "x-qlik-stability": "experimental"
    },
    "NxTreeDimensionDef": {
      "type": "object",
      "properties": {
        "qLibraryId": {
          "type": "string",
          "description": "Refers to a dimension stored in the library."
        },
        "qDef": {
          "type": "object",
          "description": "Refers to a dimension.",
          "$ref": "#/definitions/NxInlineDimensionDef"
        },
        "qValueExprs": {
          "type": "array",
          "description": "List of measures.",
          "items": {
            "$ref": "#/definitions/NxMeasure"
          }
        },
        "qNullSuppression": {
          "type": "boolean",
          "description": "If set to true, no null values are returned."
        },
        "qOtherTotalSpec": {
          "type": "object",
          "description": "Sets the dimension limits. Each dimension of a hypercube is configured separately.\nDefines if some values (grouped as _Others_ ) should be grouped together in the visualization.\nFor example in a pie chart all values lower than 200 could be grouped together.",
          "$ref": "#/definitions/OtherTotalSpecProp"
        },
        "qShowAll": {
          "type": "boolean",
          "description": "If set to true, all dimension values are shown."
        },
        "qOtherLabel": {
          "type": "object",
          "description": "This property is used when some dimension limits are set.\nLabel of the _Others_ group. The default label is _Others_ .\nExample:\n_\"qOtherLabel\":\"= &lt;label&gt;\"_\nor\n_\"qOtherLabel\":{\"qExpr\":\"= &lt;label&gt;\"}_\nWhere:\n* &lt; _label_ &gt; is the label of the _Others_ group.",
          "$ref": "#/definitions/StringExpr"
        },
        "qTotalLabel": {
          "type": "object",
          "description": "If this property is set, the total of the calculated values is returned.\nThe default label is _Total_ .\nExample:\n_\"qTotalLabel\":\"= &lt;label&gt;\"_\nor\n_\"qTotalLabel\":{\"qExpr\":\"= &lt;label&gt;\"}_\nWhere:\n* &lt; _label_ &gt; is the label of the _Total_ group.",
          "$ref": "#/definitions/StringExpr"
        },
        "qCalcCondition": {
          "type": "object",
          "description": "Specifies a calculation condition object.\nIf CalcCondition.Cond is not fulfilled, the dimension is excluded from the calculation and CalcCondition.Msg is evaluated.\nBy default, there is no calculation condition.\nThis property is optional.",
          "$ref": "#/definitions/NxCalcCond"
        },
        "qAttributeExpressions": {
          "type": "array",
          "description": "List of attribute expressions.",
          "items": {
            "$ref": "#/definitions/NxAttrExprDef"
          }
        },
        "qAttributeDimensions": {
          "type": "array",
          "description": "List of attribute dimensions.",
          "items": {
            "$ref": "#/definitions/NxAttrDimDef"
          }
        }
      },
      "x-qlik-stability": "experimental"
    },
    "TreeData": {
      "type": "object",
      "description": "Renders the properties of a TreeData object. Is the layout for TreeDataDef.\nFor more information about the definition of TreeData, see _Generic object_.\n<div class=note>To retrieve data from the TreeData object, use the method called GetHyperCubeTreeData.</div>",
      "properties": {
        "qStateName": {
          "type": "string",
          "description": "Name of the alternate state.\nDefault is current selections _$_ ."
        },
        "qNodesOnDim": {
          "type": "array",
          "description": "The total number of nodes on each dimension.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "qError": {
          "type": "object",
          "description": "This parameter is optional and is displayed in case of error.",
          "$ref": "#/definitions/NxValidationError"
        },
        "qDimensionInfo": {
          "type": "array",
          "description": "Information on the dimension.",
          "items": {
            "$ref": "#/definitions/NxTreeDimensionInfo"
          }
        },
        "qEffectiveInterColumnSortOrder": {
          "type": "array",
          "description": "Defines the order of the dimenion levels/columns in the TreeData object.\nColumn numbers are separated by a comma.\nExample: [1,0,2] means that the first level in the tree structure is dimension 1, followed by dimension 0 and dimension 2.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "qHasOtherValues": {
          "type": "boolean",
          "description": "True if other row exists."
        },
        "qTitle": {
          "type": "string",
          "description": "Title of the TreeData object, for example the title of a chart."
        },
        "qLastExpandedPos": {
          "type": "object",
          "description": "Position of the last expended cell.\nThis property is optional.",
          "$ref": "#/definitions/NxCellPosition"
        },
        "qCalcCondMsg": {
          "type": "string",
          "description": "The message displayed if calculation condition is not fulfilled."
        }
      },
      "x-qlik-stability": "experimental"
    },
    "NxTreeDimensionInfo": {
      "type": "object",
      "properties": {
        "qFallbackTitle": {
          "type": "string",
          "description": "Corresponds to the label of the dimension that is selected.\nIf the label is not defined then the field name is used."
        },
        "qApprMaxGlyphCount": {
          "type": "integer",
          "description": "Length of the longest value in the field.",
          "format": "int32"
        },
        "qCardinal": {
          "type": "integer",
          "description": "Number of distinct field values.",
          "format": "int32"
        },
        "qLocked": {
          "type": "boolean",
          "description": "Is set to true if the field is locked."
        },
        "qSortIndicator": {
          "type": "string",
          "description": "Sort indicator.\nThe default value is no sorting.\nThis parameter is optional.\n\nOne of:\n* N or NX_SORT_INDICATE_NONE\n* A or NX_SORT_INDICATE_ASC\n* D or NX_SORT_INDICATE_DESC",
          "enum": [
            "NX_SORT_INDICATE_NONE",
            "NX_SORT_INDICATE_ASC",
            "NX_SORT_INDICATE_DESC"
          ]
        },
        "qGroupFallbackTitles": {
          "type": "array",
          "description": "Array of dimension labels.\nContains the labels of all dimensions in a hierarchy group (for example the labels of all dimensions in a drill down group).",
          "items": {
            "type": "string"
          }
        },
        "qGroupPos": {
          "type": "integer",
          "description": "Index of the dimension that is currently in use.\n_qGroupPos_ is set to 0 if there are no hierarchical groups (drill-down groups) or cycle groups.",
          "format": "int32"
        },
        "qStateCounts": {
          "type": "object",
          "description": "Number of values in a particular state.",
          "$ref": "#/definitions/NxStateCounts"
        },
        "qTags": {
          "type": "array",
          "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII",
          "items": {
            "type": "string"
          }
        },
        "qError": {
          "type": "object",
          "description": "This parameter is optional.\nGives information on the error.",
          "$ref": "#/definitions/NxValidationError"
        },
        "qDimensionType": {
          "type": "string",
          "description": "Binary format of the field.\n\nOne of:\n* D or NX_DIMENSION_TYPE_DISCRETE\n* N or NX_DIMENSION_TYPE_NUMERIC\n* T or NX_DIMENSION_TYPE_TIME",
          "enum": [
            "NX_DIMENSION_TYPE_DISCRETE",
            "NX_DIMENSION_TYPE_NUMERIC",
            "NX_DIMENSION_TYPE_TIME"
          ]
        },
        "qReverseSort": {
          "type": "boolean",
          "description": "If set to true, it inverts the sort criteria in the field."
        },
        "qGrouping": {
          "type": "string",
          "description": "Defines the grouping.\n\nOne of:\n* N or GRP_NX_NONE\n* H or GRP_NX_HIEARCHY\n* C or GRP_NX_COLLECTION",
          "enum": [
            "GRP_NX_NONE",
            "GRP_NX_HIEARCHY",
            "GRP_NX_COLLECTION"
          ]
        },
        "qIsSemantic": {
          "type": "boolean",
          "description": "If set to true, it means that the field is a semantic."
        },
        "qNumFormat": {
          "type": "object",
          "description": "Format of the field.\nThis parameter is optional.",
          "$ref": "#/definitions/FieldAttributes"
        },
        "qIsAutoFormat": {
          "type": "boolean",
          "description": "This parameter is set to true if _qNumFormat_ is set to _U_ (unknown). The engine guesses the type of the field based on the field's definition."
        },
        "qGroupFieldDefs": {
          "type": "array",
          "description": "Array of field names.",
          "items": {
            "type": "string"
          }
        },
        "qMin": {
          "type": "number",
          "description": "Minimum value.",
          "format": "double"
        },
        "qMax": {
          "type": "number",
          "description": "Maximum value.",
          "format": "double"
        },
        "qContinuousAxes": {
          "type": "boolean",
          "description": "Is continuous axis used."
        },
        "qIsCyclic": {
          "type": "boolean",
          "description": "Is a cyclic dimension used."
        },
        "qDerivedField": {
          "type": "boolean",
          "description": "Is derived field is used as a dimension."
        },
        "qMeasureInfo": {
          "type": "array",
          "description": "A List of measures to be calculated on this TreeDimension.",
          "items": {
            "$ref": "#/definitions/NxMeasureInfo"
          }
        },
        "qAttrExprInfo": {
          "type": "array",
          "description": "List of attribute expressions.",
          "items": {
            "$ref": "#/definitions/NxAttrExprInfo"
          }
        },
        "qAttrDimInfo": {
          "type": "array",
          "description": "List of attribute dimensions.",
          "items": {
            "$ref": "#/definitions/NxAttrDimInfo"
          }
        },
        "qCalcCondMsg": {
          "type": "string",
          "description": "The message displayed if calculation condition is not fulfilled."
        },
        "qIsCalculated": {
          "type": "boolean",
          "description": "True if this is a calculated dimension.",
          "default": false
        },
        "qIsOneAndOnlyOne": {
          "type": "boolean",
          "description": "If set to true, it means that the field always has one and only one selected value."
        }
      },
      "x-qlik-stability": "experimental"
    },
    "UndoInfoDef": {
      "type": "object",
      "description": "Defines if an object should contain information on the number of possible undo and redo.\n\n### Properties\n\"qUndoInfoDef\": {}\nThe numbers of undos and redos are empty when an object is created. The number of possible undos is increased every time an action (for example, create a child, set some properties) on the object is performed. The number of possible redos is increased every time an undo action is performed.",
      "x-qlik-see-also": [
        "[Undo or redo an action](#csh-undo-redo)",
        "[UndoInfo](#csh-UndoInfo)"
      ]
    },
    "UndoInfo": {
      "type": "object",
      "description": "Displays information about the number of possible undos and redos. Is the layout for _UndoInfoDef_.",
      "properties": {
        "qUndoCount": {
          "type": "integer",
          "description": "Number of possible undos.",
          "format": "int32"
        },
        "qRedoCount": {
          "type": "integer",
          "description": "Number of possible redos.",
          "format": "int32"
        }
      }
    },
    "ValueExpression": {
      "type": "object",
      "description": "### Properties\nAbbreviated syntax:\n\"qValueExpression\":\"=&lt;expression&gt;\"\nExtended object syntax:\n\"qValueExpression\":{\"qExpr\":\"=&lt;expression&gt;\"}\nWhere:\n* &lt; **expression** &gt; is a string.\n\n<div class=note>The \"=\" sign in the value expression is not mandatory. Even if the \"=\" sign is not given, the expression is evaluated.</div>\nThe expression is evaluated as a numeric.",
      "properties": {
        "qExpr": {
          "type": "string"
        }
      }
    },
    "VariableListDef": {
      "type": "object",
      "description": "Defines the list of variables in an app.",
      "properties": {
        "qType": {
          "type": "string",
          "description": "Type of the list."
        },
        "qShowReserved": {
          "type": "boolean",
          "description": "Shows the reserved variables if set to true."
        },
        "qShowConfig": {
          "type": "boolean",
          "description": "Shows the system variables if set to true."
        },
        "qData": {
          "type": "object",
          "description": "Data",
          "$ref": "#/definitions/JsonObject"
        }
      },
      "x-qlik-see-also": [
        "[List all app objects](#csh-list-app-objects)",
        "[VariableList](#csh-VariableList)"
      ]
    },
    "VariableList": {
      "type": "object",
      "description": "Lists the variables in an app. Is the layout for _VariableListDef_.",
      "properties": {
        "qItems": {
          "type": "array",
          "description": "List of the variables.",
          "items": {
            "$ref": "#/definitions/NxVariableListItem"
          }
        }
      },
      "x-qlik-see-also": [
        "[List all app objects](#csh-list-app-objects)"
      ]
    },
    "NxVariableListItem": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the variable."
        },
        "qDescription": {
          "type": "string",
          "description": "Description of the variable."
        },
        "qDefinition": {
          "type": "string",
          "description": "Definition of the variable. It can be a value or an expression."
        },
        "qIsConfig": {
          "type": "boolean",
          "description": "If set to true, it means that the variable is a system variable.\nA system variable provides information about the system and is set by the engine. The content cannot be changed by the user.\nThis parameter is optional.\nThe default value is false.",
          "default": false
        },
        "qIsReserved": {
          "type": "boolean",
          "description": "If set to true, it means that the variable is reserved.\nThe default value is false.\nThis parameter is optional.\nExamples:\n* _ScriptError_ is a reserved variable, set by the engine.\n* _DayNames_ is a reserved variable, set by the user.",
          "default": false
        },
        "qMeta": {
          "type": "object",
          "description": "Information about publishing and permissions.\nThis parameter is optional.",
          "$ref": "#/definitions/NxMeta"
        },
        "qInfo": {
          "type": "object",
          "description": "Identifier and type of the object.\nThis parameter is mandatory.",
          "$ref": "#/definitions/NxInfo"
        },
        "qData": {
          "type": "object",
          "description": "Data.",
          "$ref": "#/definitions/JsonObject"
        },
        "qIsScriptCreated": {
          "type": "boolean",
          "description": "If set to true, it means that the variable was defined via script."
        }
      },
      "x-qlik-see-also": [
        "[List all app objects](#csh-list-app-objects)",
        "[VariableList](#csh-VariableList)"
      ]
    },
    "GenericDimensionLayout": {
      "type": "object",
      "description": "Is the layout for _GenericDimensionProperties_.",
      "properties": {
        "qInfo": {
          "type": "object",
          "description": "Identifier and type of the dimension.",
          "$ref": "#/definitions/NxInfo"
        },
        "qMeta": {
          "type": "object",
          "description": "Information about publishing and permissions.",
          "$ref": "#/definitions/NxMeta"
        },
        "qDim": {
          "type": "object",
          "description": "Name and label of the dimension, information about grouping.",
          "$ref": "#/definitions/NxLibraryDimension"
        },
        "qDimInfos": {
          "type": "array",
          "description": "Cardinal and tags related to the dimension.\nLength of the longest value in the field.",
          "items": {
            "$ref": "#/definitions/GenericDimensionInfo"
          }
        }
      }
    },
    "GenericDimensionInfo": {
      "type": "object",
      "properties": {
        "qApprMaxGlyphCount": {
          "type": "integer",
          "description": "Length of the longest value in the field.",
          "format": "int32"
        },
        "qCardinal": {
          "type": "integer",
          "description": "Number of distinct field values",
          "format": "int32"
        },
        "qTags": {
          "type": "array",
          "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII",
          "items": {
            "type": "string"
          }
        },
        "qIsSemantic": {
          "type": "boolean",
          "description": "If set to true, it means that the field is a semantic."
        },
        "qAndMode": {
          "type": "boolean",
          "description": "If set to true a logical AND (instead of a logical OR) is used when making selections in a field.\nThe default value is false."
        }
      }
    },
    "GenericDimensionProperties": {
      "type": "object",
      "properties": {
        "qInfo": {
          "type": "object",
          "description": "Identifier and type of the dimension.\nThis parameter is mandatory.",
          "$ref": "#/definitions/NxInfo"
        },
        "qDim": {
          "type": "object",
          "description": "Definition of the dimension.\nThis parameter is mandatory.",
          "$ref": "#/definitions/NxLibraryDimensionDef"
        },
        "qMetaDef": {
          "type": "object",
          "description": "Definition of the dynamic properties.",
          "$ref": "#/definitions/NxMetaDef"
        }
      }
    },
    "BookmarkFieldPage": {
      "type": "object",
      "description": "Defines the range of the bookmark fields that are returned.",
      "properties": {
        "qStartIndex": {
          "type": "integer",
          "description": "The start value of the range.",
          "format": "int32"
        },
        "qEndIndex": {
          "type": "integer",
          "description": "The end value of the range.",
          "format": "int32"
        }
      }
    },
    "GenericBookmarkLayout": {
      "type": "object",
      "description": "Is the layout for _GenericBookmarkProperties_.",
      "properties": {
        "qInfo": {
          "type": "object",
          "description": "Information about the object.",
          "$ref": "#/definitions/NxInfo"
        },
        "qMeta": {
          "type": "object",
          "description": "Information on publishing and permissions.",
          "$ref": "#/definitions/NxMeta"
        },
        "qBookmark": {
          "type": "object",
          "description": "Information about the bookmark.",
          "$ref": "#/definitions/NxBookmark"
        },
        "qFieldInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayoutFieldInfo"
          }
        }
      }
    },
    "LayoutFieldInfo": {
      "type": "object",
      "properties": {
        "qFieldName": {
          "type": "string"
        },
        "qValuesCount": {
          "type": "integer",
          "format": "int32"
        },
        "qExcludedValuesCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GenericVariableLayout": {
      "type": "object",
      "description": "Is the layout for _GenericVariableProperties_.",
      "properties": {
        "qInfo": {
          "type": "object",
          "description": "Identifier and type of the object.\nThis parameter is mandatory.",
          "$ref": "#/definitions/NxInfo"
        },
        "qMeta": {
          "type": "object",
          "description": "Information about publishing and permissions.\nThis parameter is optional.",
          "$ref": "#/definitions/NxMeta"
        },
        "qText": {
          "type": "string",
          "description": "Some text."
        },
        "qNum": {
          "type": "number",
          "description": "A value.",
          "format": "double"
        },
        "qIsScriptCreated": {
          "type": "boolean",
          "description": "If set to true, it means that the variable was defined via script."
        }
      }
    },
    "GenericVariableProperties": {
      "type": "object",
      "properties": {
        "qInfo": {
          "type": "object",
          "description": "Identifier and type of the object.\nThis parameter is mandatory.",
          "$ref": "#/definitions/NxInfo"
        },
        "qMetaDef": {
          "type": "object",
          "description": "Meta data.",
          "$ref": "#/definitions/NxMetaDef"
        },
        "qName": {
          "type": "string",
          "description": "Name of the variable.\nThe name must be unique.\nThis parameter is mandatory."
        },
        "qComment": {
          "type": "string",
          "description": "Comment related to the variable.\nThis parameter is optional."
        },
        "qNumberPresentation": {
          "type": "object",
          "description": "Defines the format of the value.\nThis parameter is optional.",
          "$ref": "#/definitions/FieldAttributes"
        },
        "qIncludeInBookmark": {
          "type": "boolean",
          "description": "Set this property to true to update the variable when applying a bookmark. The variable value will be persisted in the bookmark.\nThe value of a variable can affect the state of the selections.\nScript variables cannot be persisted in the bookmark.\nThe default value is false.",
          "default": false
        },
        "qDefinition": {
          "type": "string",
          "description": "Definition of the variable."
        }
      }
    },
    "GenericMeasureLayout": {
      "type": "object",
      "description": "Is the layout for _GenericMeasureProperties_.",
      "properties": {
        "qInfo": {
          "type": "object",
          "description": "Information about the object.",
          "$ref": "#/definitions/NxInfo"
        },
        "qMeasure": {
          "type": "object",
          "description": "Information about the measure.",
          "$ref": "#/definitions/NxLibraryMeasure"
        },
        "qMeta": {
          "type": "object",
          "description": "Information on publishing and permissions.",
          "$ref": "#/definitions/NxMeta"
        }
      }
    },
    "GenericMeasureProperties": {
      "type": "object",
      "properties": {
        "qInfo": {
          "type": "object",
          "description": "Information about the measure.\nThis parameter is mandatory.",
          "$ref": "#/definitions/NxInfo"
        },
        "qMeasure": {
          "type": "object",
          "description": "Definition of the measure.\nThis parameter is mandatory.",
          "$ref": "#/definitions/NxLibraryMeasureDef"
        },
        "qMetaDef": {
          "type": "object",
          "description": "Definition of the dynamic properties.",
          "$ref": "#/definitions/NxMetaDef"
        }
      }
    },
    "FieldDescription": {
      "type": "object",
      "properties": {
        "qInternalNumber": {
          "type": "integer",
          "description": "Internal number of the field.",
          "format": "int32"
        },
        "qName": {
          "type": "string",
          "description": "Name of the field."
        },
        "qSrcTables": {
          "type": "array",
          "description": "List of table names.",
          "items": {
            "type": "string"
          }
        },
        "qIsSystem": {
          "type": "boolean",
          "description": "If set to true, it means that the field is a system field.\nThe default value is false."
        },
        "qIsHidden": {
          "type": "boolean",
          "description": "If set to true, it means that the field is hidden.\nThe default value is false."
        },
        "qIsSemantic": {
          "type": "boolean",
          "description": "If set to true, it means that the field is a semantic.\nThe default value is false."
        },
        "qDistinctOnly": {
          "type": "boolean",
          "description": "If set to true, only distinct field values are shown.\nThe default value is false."
        },
        "qCardinal": {
          "type": "integer",
          "description": "Number of distinct field values.",
          "format": "int32"
        },
        "qTotalCount": {
          "type": "integer",
          "description": "Total number of field values.",
          "format": "int64"
        },
        "qPossibleCount_OBSOLETE": {
          "type": "integer",
          "format": "int32"
        },
        "qHasInfo_OBSOLETE": {
          "type": "boolean"
        },
        "qIsLocked": {
          "type": "boolean",
          "description": "If set to true, it means that the field is locked.\nThe default value is false."
        },
        "qAlwaysOneSelected": {
          "type": "boolean",
          "description": "If set to true, it means that the field has one and only one selection (not 0 and not more than 1).\nIf this property is set to true, the field cannot be cleared anymore and no more selections can be performed in that field.\nThe default value is false."
        },
        "qAndMode": {
          "type": "boolean",
          "description": "If set to true a logical AND (instead of a logical OR) is used when making selections in a field.\nThe default value is false."
        },
        "qIsNumeric": {
          "type": "boolean",
          "description": "Is set to true if the value is a numeric.\nThe default value is false."
        },
        "qComment": {
          "type": "string",
          "description": "Field comment."
        },
        "qTags": {
          "type": "array",
          "description": "Gives information on a field. For example, it can return the type of the field.\nExamples: key, text, ASCII.",
          "items": {
            "type": "string"
          }
        },
        "qIsDefinitionOnly": {
          "type": "boolean",
          "description": "If set to true, it means that the field is a field on the fly.\nThe default value is false."
        },
        "qByteSize": {
          "type": "integer",
          "description": "Static RAM memory used in bytes.",
          "format": "int64"
        }
      }
    },
    "LocaleInfo": {
      "type": "object",
      "properties": {
        "qDecimalSep": {
          "type": "string",
          "description": "Decimal separator."
        },
        "qThousandSep": {
          "type": "string",
          "description": "Thousand separator."
        },
        "qListSep": {
          "type": "string",
          "description": "List separator."
        },
        "qMoneyDecimalSep": {
          "type": "string",
          "description": "Money decimal separator."
        },
        "qMoneyThousandSep": {
          "type": "string",
          "description": "Money thousand separator."
        },
        "qCurrentYear": {
          "type": "integer",
          "description": "Current year.",
          "format": "int32"
        },
        "qMoneyFmt": {
          "type": "string",
          "description": "Money format.\nExample: _#.##0,00 kr;-#.##0,00 kr_"
        },
        "qTimeFmt": {
          "type": "string",
          "description": "Time format.\nExample: _hh:mm:ss_"
        },
        "qDateFmt": {
          "type": "string",
          "description": "Date format.\nExample: _YYYY-MM-DD_"
        },
        "qTimestampFmt": {
          "type": "string",
          "description": "Time stamp format.\nExample: _YYYY-MM-DD hh:mm:ss[.fff]_"
        },
        "qCalendarStrings": {
          "type": "object",
          "description": "Information about the calendar.",
          "$ref": "#/definitions/CalendarStrings"
        },
        "qFirstWeekDay": {
          "type": "integer",
          "description": "First day of the week, starting from 0.\nAccording to ISO 8601, _Monday_ is the first day of the week.\n* 0 = Monday\n* 1 = Tuesday\n* ...\n* 6 = Sunday\n\nIf this property has not been set in a script, the returned value comes from the Windows operating system.",
          "format": "int32"
        },
        "qBrokenWeeks": {
          "type": "boolean",
          "description": "Is set to true if broken weeks are allowed in a year.\nAccording to ISO 8601, no broken weeks should be allowed.\nThis property is not shown if set to false.\nIf _qBrokenWeeks_ is set to true, _qReferenceDay_ is irrelevant.\nIf this property has not been set in a script, the returned value comes from the Windows operating system."
        },
        "qReferenceDay": {
          "type": "integer",
          "description": "Day in the year that is always in week 1.\nAccording to ISO 8601, January 4th should always be part of the first week of the year ( _qReferenceDay_ =4).\nRecommended values are in the range 1 and 7.\nIf this property has not been set in a script, the returned value comes from the Windows operating system.\nThis property is not relevant if there are broken weeks in the year.",
          "format": "int32"
        },
        "qFirstMonthOfYear": {
          "type": "integer",
          "description": "First month of the year, starting from 1.\nAccording to ISO 8601, _January_ is the first month of the year.\n* 1 = January\n* 2 = February\n* 12 = January\n\nIf this property has not been set in a script, the returned value comes from the Windows operating system.",
          "format": "int32"
        },
        "qCollation": {
          "type": "string",
          "description": "Locale name (following language tagging convention RFC 4646):\n_&lt; language&gt;-&lt;REGION&gt;_\nWhere:\n* _language_ is a lowercase ISO  639 language code\n* _REGION_ specifies an uppercase ISO 3166 country code.\n\nIf this property has not been set in a script, the returned value comes from the Windows operating system."
        },
        "qNumericalAbbreviation": {
          "type": "string",
          "description": "Number format.\nExample: 3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y"
        }
      }
    },
    "CalendarStrings": {
      "type": "object",
      "properties": {
        "qDayNames": {
          "type": "array",
          "description": "List of short day names.",
          "items": {
            "type": "string"
          }
        },
        "qMonthNames": {
          "type": "array",
          "description": "List of short month names.",
          "items": {
            "type": "string"
          }
        },
        "qLongDayNames": {
          "type": "array",
          "description": "List of long day names.",
          "items": {
            "type": "string"
          }
        },
        "qLongMonthNames": {
          "type": "array",
          "description": "List of long month names.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TableRecord": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the table."
        },
        "qLoose": {
          "type": "boolean",
          "description": "This property is set to true if the table is loose."
        },
        "qNoOfRows": {
          "type": "integer",
          "description": "Number of rows in the table.",
          "format": "int64"
        },
        "qFields": {
          "type": "array",
          "description": "Information about the fields in the table.",
          "items": {
            "$ref": "#/definitions/FieldInTableData"
          }
        },
        "qPos": {
          "type": "object",
          "description": "Information about the position of the table.",
          "$ref": "#/definitions/Point"
        },
        "qComment": {
          "type": "string",
          "description": "Comment related to the table."
        },
        "qIsDirectDiscovery": {
          "type": "boolean",
          "description": "If set to true, Direct Discovery is used.\nDirect Discovery fields are not loaded into memory and remain in the external database."
        },
        "qIsSynthetic": {
          "type": "boolean",
          "description": "This property is set to true if the table contains a synthetic key."
        }
      }
    },
    "FieldInTableData": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the field."
        },
        "qOriginalFields": {
          "type": "array",
          "description": "Is shown for fixed records.\n_qOriginalFieldName_ and _qName_ are identical if no field names are used in the file.\n_qOriginalFieldName_ differs from _qName_ if embedded file names are used in the file.",
          "items": {
            "type": "string"
          }
        },
        "qPresent": {
          "type": "boolean"
        },
        "qHasNull": {
          "type": "boolean",
          "description": "This property is set to true if the field contains some Null values."
        },
        "qHasWild": {
          "type": "boolean"
        },
        "qHasDuplicates": {
          "type": "boolean",
          "description": "This property is set to true if the field contains some duplicate values."
        },
        "qIsSynthetic": {
          "type": "boolean",
          "description": "This property is set to true if the field contains a synthetic key."
        },
        "qInformationDensity": {
          "type": "number",
          "description": "Number of records that have values (for example, not NULL) in the field as compared to the total number of records in the table.",
          "format": "double"
        },
        "qnNonNulls": {
          "type": "integer",
          "description": "Number of values that are non Null.",
          "format": "int64"
        },
        "qnRows": {
          "type": "integer",
          "description": "Number of rows in the field.",
          "format": "int64"
        },
        "qSubsetRatio": {
          "type": "number",
          "description": "Number of distinct values in the field (in the current table) as compared to the total number of distinct values of this field (in all tables).",
          "format": "double"
        },
        "qnTotalDistinctValues": {
          "type": "integer",
          "description": "Number of distinct values in the field.",
          "format": "int32"
        },
        "qnPresentDistinctValues": {
          "type": "integer",
          "format": "int32"
        },
        "qKeyType": {
          "type": "string",
          "description": "Tells if the field is a key field.\n\nOne of:\n* NOT_KEY\n* ANY_KEY\n* PRIMARY_KEY\n* PERFECT_KEY",
          "enum": [
            "NOT_KEY",
            "ANY_KEY",
            "PRIMARY_KEY",
            "PERFECT_KEY"
          ]
        },
        "qComment": {
          "type": "string",
          "description": "Comment related to the field."
        },
        "qTags": {
          "type": "array",
          "description": "List of tags related to the field.",
          "items": {
            "type": "string"
          }
        },
        "qDerivedFields": {
          "type": "array",
          "description": "List of the derived fields.",
          "items": {
            "$ref": "#/definitions/DerivedFieldsInTableData"
          }
        },
        "qIsFieldOnTheFly": {
          "type": "boolean",
          "default": false
        },
        "qReadableName": {
          "type": "string"
        }
      }
    },
    "DerivedFieldsInTableData": {
      "type": "object",
      "properties": {
        "qDefinitionName": {
          "type": "string",
          "description": "Name of the derived definition."
        },
        "qTags": {
          "type": "array",
          "description": "List of tags.",
          "items": {
            "type": "string"
          }
        },
        "qActive": {
          "type": "boolean",
          "description": "Is set to true is the derived field is in use."
        }
      }
    },
    "Point": {
      "type": "object",
      "properties": {
        "qx": {
          "type": "integer",
          "description": "x-coordinate in pixels.\nThe origin is the top left of the screen.",
          "format": "int32"
        },
        "qy": {
          "type": "integer",
          "description": "y-coordinate in pixels.\nThe origin is the top left of the screen.",
          "format": "int32"
        }
      }
    },
    "SourceKeyRecord": {
      "type": "object",
      "properties": {
        "qKeyFields": {
          "type": "array",
          "description": "Name of the key field.",
          "items": {
            "type": "string"
          }
        },
        "qTables": {
          "type": "array",
          "description": "Table the key belongs to.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TableViewDlgSaveInfo": {
      "type": "object",
      "properties": {
        "qPos": {
          "type": "object",
          "description": "Information about the position of the dialog window.\nNot used in Qlik Sense.",
          "$ref": "#/definitions/Rect"
        },
        "qCtlInfo": {
          "type": "object",
          "description": "Set of data for internal and source view modes.",
          "$ref": "#/definitions/TableViewCtlSaveInfo"
        },
        "qMode": {
          "type": "integer",
          "description": "View mode to display when opening Qlik Sense data model viewer.\nOne of:\n* 0 for internal view mode.\n* 1 for source view mode.",
          "format": "int32"
        }
      }
    },
    "TableViewCtlSaveInfo": {
      "type": "object",
      "properties": {
        "qInternalView": {
          "type": "object",
          "description": "Internal view mode.",
          "$ref": "#/definitions/TableViewSaveInfo"
        },
        "qSourceView": {
          "type": "object",
          "description": "Source view mode.",
          "$ref": "#/definitions/TableViewSaveInfo"
        }
      }
    },
    "TableViewSaveInfo": {
      "type": "object",
      "properties": {
        "qTables": {
          "type": "array",
          "description": "List of the tables in the database model viewer.",
          "items": {
            "$ref": "#/definitions/TableViewTableWinSaveInfo"
          }
        },
        "qBroomPoints": {
          "type": "array",
          "description": "List of the broom points in the database model viewer.\nNot used in Qlik Sense.",
          "items": {
            "$ref": "#/definitions/TableViewBroomPointSaveInfo"
          }
        },
        "qConnectionPoints": {
          "type": "array",
          "description": "List of connection points in the database model viewer.\nNot used in Qlik Sense.",
          "items": {
            "$ref": "#/definitions/TableViewConnectionPointSaveInfo"
          }
        },
        "qZoomFactor": {
          "type": "number",
          "description": "Zoom factor in the database model viewer.\nThe default value is 1.0.",
          "format": "double",
          "default": 1.0
        }
      }
    },
    "TableViewTableWinSaveInfo": {
      "type": "object",
      "properties": {
        "qPos": {
          "type": "object",
          "description": "Information about the position of the table.",
          "$ref": "#/definitions/Rect"
        },
        "qCaption": {
          "type": "string",
          "description": "Table name."
        }
      }
    },
    "TableViewBroomPointSaveInfo": {
      "type": "object",
      "properties": {
        "qPos": {
          "type": "object",
          "description": "Information about the position of the broom point.",
          "$ref": "#/definitions/Point"
        },
        "qTable": {
          "type": "string",
          "description": "Name of the table."
        },
        "qFields": {
          "type": "array",
          "description": "List of fields in the table.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TableViewConnectionPointSaveInfo": {
      "type": "object",
      "properties": {
        "qPos": {
          "type": "object",
          "description": "Information about the position of the connection point.",
          "$ref": "#/definitions/Point"
        },
        "qFields": {
          "type": "array",
          "description": "List of the fields in the table.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EditorBreakpoint": {
      "type": "object",
      "properties": {
        "qbufferName": {
          "type": "string",
          "description": "Name of the breakpoint."
        },
        "qlineIx": {
          "type": "integer",
          "description": "Line number in the script where the breakpoint is set.",
          "format": "int32"
        },
        "qEnabled": {
          "type": "boolean",
          "description": "If set to true then the breakpoint is enabled (in use)."
        }
      }
    },
    "TextMacro": {
      "type": "object",
      "properties": {
        "qTag": {
          "type": "string",
          "description": "Name of the variable."
        },
        "qRefSeqNo": {
          "type": "integer",
          "description": "Order in which the variable was referenced during the script execution.\nThe same number sequence is used for both _qRefSeqNo_ and _qSetSeqNo_ .",
          "format": "int32"
        },
        "qSetSeqNo": {
          "type": "integer",
          "description": "Order in which the variable was updated during the script execution.\nThe same number sequence is used for both _qRefSeqNo_ and _qSetSeqNo_ .",
          "format": "int32"
        },
        "qDisplayString": {
          "type": "string",
          "description": "Variable value."
        },
        "qIsSystem": {
          "type": "boolean",
          "description": "Is set to true if the variable is a system variable.",
          "default": false
        },
        "qIsReserved": {
          "type": "boolean",
          "description": "Is set to true if the variable is a reserved variable.",
          "default": false
        }
      }
    },
    "TableRow": {
      "type": "object",
      "properties": {
        "qValue": {
          "type": "array",
          "description": "Array of field values.",
          "items": {
            "$ref": "#/definitions/FieldValue"
          }
        }
      }
    },
    "NxAppLayout": {
      "type": "object",
      "description": "### Qlik Sense Desktop\nIn Qlik Sense Desktop, this structure can contain dynamic properties.\n\n### Qlik Sense Enterprise\nIn Qlik Sense Enterprise, only a few dynamic properties at the app level are persisted.\nThe persisted dynamic properties are the following:\n* modifiedDate\n* published\n* publishTime\n* privileges\n* description\n* dynamicColor",
      "properties": {
        "qTitle": {
          "type": "string",
          "description": "Title of the app."
        },
        "qFileName": {
          "type": "string",
          "description": "In Qlik Sense Enterprise, this property corresponds to the app identifier (GUID).\nIn Qlik Sense Desktop, this property corresponds to the full path of the app."
        },
        "qLastReloadTime": {
          "type": "string",
          "description": "Date and time of the last reload of the app in ISO format."
        },
        "qModified": {
          "type": "boolean",
          "description": "Is set to true if the app has been updated since the last save."
        },
        "qHasScript": {
          "type": "boolean",
          "description": "Is set to true if a script is defined in the app."
        },
        "qStateNames": {
          "type": "array",
          "description": "Array of alternate states.",
          "items": {
            "type": "string"
          }
        },
        "qMeta": {
          "type": "object",
          "description": "Information on publishing and permissions.",
          "$ref": "#/definitions/NxMeta"
        },
        "qLocaleInfo": {
          "type": "object",
          "description": "Information about the locale.",
          "$ref": "#/definitions/LocaleInfo"
        },
        "qHasData": {
          "type": "boolean",
          "description": "Is set to true if the app contains data following a script reload."
        },
        "qReadOnly": {
          "type": "boolean",
          "description": "If set to true, it means that the app is read-only."
        },
        "qIsOpenedWithoutData": {
          "type": "boolean",
          "description": "If set to true, it means that the app was opened without loading its data."
        },
        "qThumbnail": {
          "type": "object",
          "description": "App thumbnail.",
          "$ref": "#/definitions/StaticContentUrl"
        }
      }
    },
    "NxAppProperties": {
      "type": "object",
      "description": "### Qlik Sense Desktop\nIn Qlik Sense Desktop, this structure can contain dynamic properties.\n\n### Qlik Sense Enterprise\nIn Qlik Sense Enterprise, only a few dynamic properties at the app level are persisted.\nThe persisted dynamic properties are the following:\n* modifiedDate\n* published\n* publishTime\n* privileges\n* description\n* dynamicColor",
      "properties": {
        "qTitle": {
          "type": "string",
          "description": "App title."
        },
        "qLastReloadTime": {
          "type": "string",
          "description": "Last reload time of the app."
        },
        "qMigrationHash": {
          "type": "string",
          "description": "Internal property reserved for app migration.\nPatch version of the app.\nDo not update."
        },
        "qSavedInProductVersion": {
          "type": "string",
          "description": "Internal property reserved for app migration.\nThe app is saved in this version of the product.\nDo not update."
        },
        "qThumbnail": {
          "type": "object",
          "description": "App thumbnail.",
          "$ref": "#/definitions/StaticContentUrlDef"
        }
      }
    },
    "LineageInfo": {
      "type": "object",
      "properties": {
        "qDiscriminator": {
          "type": "string",
          "description": "A string indicating the origin of the data:\n* [filename]: the data comes from a local file.\n* INLINE: the data is entered inline in the load script.\n* RESIDENT: the data comes from a resident table. The table name is listed.\n* AUTOGENERATE: the data is generated from the load script (no external table of data source).\n* Provider: the data comes from a data connection. The connector source name is listed.\n* [webfile]: the data comes from a web-based file.\n* STORE: path to QVD or TXT file where data is stored.\n* EXTENSION: the data comes from a Server Side Extension (SSE)."
        },
        "qStatement": {
          "type": "string",
          "description": "The LOAD and SELECT script statements from the data load script."
        }
      }
    },
    "NxGetObjectOptions": {
      "type": "object",
      "properties": {
        "qTypes": {
          "type": "array",
          "description": "List of object types.",
          "items": {
            "type": "string"
          }
        },
        "qIncludeSessionObjects": {
          "type": "boolean",
          "description": "Set to true to include session objects.\nThe default value is false.",
          "default": false
        },
        "qData": {
          "type": "object",
          "description": "Set of data.",
          "$ref": "#/definitions/JsonObject"
        }
      }
    },
    "NxGetBookmarkOptions": {
      "type": "object",
      "properties": {
        "qTypes": {
          "type": "array",
          "description": "List of object types.",
          "items": {
            "type": "string"
          }
        },
        "qData": {
          "type": "object",
          "description": "Set of data.",
          "$ref": "#/definitions/JsonObject"
        }
      }
    },
    "NxRange": {
      "type": "object",
      "properties": {
        "qFrom": {
          "type": "integer",
          "description": "Position in the expression of the first character of the field name.",
          "format": "int32"
        },
        "qCount": {
          "type": "integer",
          "description": "Number of characters in the field name.",
          "format": "int32"
        }
      }
    },
    "NxMatchingFieldInfo": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the field."
        },
        "qTags": {
          "type": "array",
          "description": "List of tags.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AssociationScore": {
      "type": "object",
      "properties": {
        "qFieldPairName": {
          "type": "string",
          "description": "Pair of fields.\n_&lt; FieldName1&gt;_ / _&lt; FieldName2&gt;_\nWhere:\n&lt; _FieldName1_ &gt; is a field in the table 1 (defined in _qTable1_ )\n&lt; _FieldName2_ &gt; is a field in the table 2 (defined in _qTable2_ )\nIf the field is a synthetic key, the name of the field is preceded by _[Synthetic key]:_ ."
        },
        "qScoreSummary": {
          "type": "integer",
          "description": "Flag used to interpret calculated scores.\nOne of the following values or sum of values that apply:\n* 0: The cardinal ratio cannot be zero but the symbol score and the row score can be zero.\n* -1: The fields do not have the same type.\n* -2: The number of rows of the field _FieldName1_ is zero.\n* -4: The number of distinct values of the field _FieldName1_ is zero.\n* -8: The number of rows of the field _FieldName2_ is zero.\n* -16: The number of distinct values of the field _FieldName2_ is zero.\n\nExample:\nThe number of rows of the field _FieldName1_ is zero, and the number of distinct values of the field _FieldName2_ is zero, then _qScoreSummary_ is -18.",
          "format": "int32"
        },
        "qField1Scores": {
          "type": "object",
          "description": "Association information about the field _FieldName1_ defined in _qFieldPairName_ .",
          "$ref": "#/definitions/FieldScores"
        },
        "qField2Scores": {
          "type": "object",
          "description": "Association information about the field _FieldName2_ defined in _qFieldPairName_ .",
          "$ref": "#/definitions/FieldScores"
        }
      }
    },
    "FieldScores": {
      "type": "object",
      "properties": {
        "qFieldName": {
          "type": "string",
          "description": "Field name.\nOne of the field names defined in _qFieldPairName._"
        },
        "qReadableName": {
          "type": "string"
        },
        "qCardinalRatio": {
          "type": "number",
          "description": "Cardinality of a column/field divided by the number of rows in the table.\nIf the cardinal ratio is 1, it means that the column is a candidate/primary key.",
          "format": "double"
        },
        "qSymbolScore": {
          "type": "number",
          "description": "Number of distinct matches between the two fields defined in _qFieldPairName_ divided by the number of distinct values in the field _qFieldName_ .\nIf 0, it means that there are no common values between the two fields defined in _qFieldPairName_ .",
          "format": "double"
        },
        "qRowScore": {
          "type": "number",
          "description": "Number of matches between the two fields defined in _qFieldPairName_ divided by the number of values in the field _qFieldName_ .\nIf 0, it means that there are no common values between the two fields defined in _qFieldPairName_ .",
          "format": "double"
        }
      }
    },
    "ContentLibraryList": {
      "type": "object",
      "properties": {
        "qItems": {
          "type": "array",
          "description": "Information about the content library.",
          "items": {
            "$ref": "#/definitions/ContentLibraryListItem"
          }
        }
      }
    },
    "ContentLibraryListItem": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the library."
        },
        "qAppSpecific": {
          "type": "boolean",
          "description": "Is set to true if the library is specific to the app (not a global content library)."
        },
        "qMeta": {
          "type": "object",
          "description": "Information about publishing and permissions.",
          "$ref": "#/definitions/NxMeta"
        }
      }
    },
    "StaticContentList": {
      "type": "object",
      "properties": {
        "qItems": {
          "type": "array",
          "description": "Information about the list of content files.",
          "items": {
            "$ref": "#/definitions/StaticContentListItem"
          }
        }
      }
    },
    "StaticContentListItem": {
      "type": "object",
      "description": "<div class=note>In addition, this structure can return dynamic properties.</div>",
      "properties": {
        "qUrlDef": {
          "type": "string",
          "description": "Relative path to the content file. The URL is static.\nIn Qlik Sense Enterprise, content files located:\n* In the _/content/ &lt;content library name&gt;/_ folder are part of a global content library.\n* In the _/appcontent/_ folder are part of the app specific library.\nThe content files are never embedded in the _qvf_ file.\nIn Qlik Sense Desktop, content files located:\n* In the _/content/default/_ folder are outside the qvf file.\n* In the _/media/ folder_ are embedded in the qvf file."
        },
        "qUrl": {
          "type": "string",
          "description": "Relative path to the content file. The URL is static.\nIn Qlik Sense Enterprise, content files located:\n* In the _/content/ &lt;content library name&gt;/_ folder are part of a global content library.\n* In the _/appcontent/_ folder are part of the app specific library.\nThe content files are never embedded in the _qvf_ file.\nIn Qlik Sense Desktop, content files located:\n* In the _/content/default/_ folder are outside the qvf file.\n* In the _/media/ folder_ are embedded in the qvf file."
        }
      }
    },
    "DoReloadExResult": {
      "type": "object",
      "properties": {
        "qSuccess": {
          "type": "boolean"
        },
        "qScriptLogFile": {
          "type": "string"
        }
      }
    },
    "DoReloadExParams": {
      "type": "object",
      "properties": {
        "qMode": {
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "qPartial": {
          "type": "boolean",
          "default": false
        },
        "qDebug": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ScriptSyntaxError": {
      "type": "object",
      "properties": {
        "qErrLen": {
          "type": "integer",
          "description": "Length of the word where the error is located.",
          "format": "int32",
          "default": 0
        },
        "qTabIx": {
          "type": "integer",
          "description": "Number of the faulty section.",
          "format": "int32",
          "default": 0
        },
        "qLineInTab": {
          "type": "integer",
          "description": "Line number in the section where the error is located.",
          "format": "int32",
          "default": 0
        },
        "qColInLine": {
          "type": "integer",
          "description": "Position of the erroneous text from the beginning of the line.",
          "format": "int32",
          "default": 0
        },
        "qTextPos": {
          "type": "integer",
          "description": "Position of the erroneous text from the beginning of the script.",
          "format": "int32",
          "default": 0
        },
        "qSecondaryFailure": {
          "type": "boolean",
          "description": "The default value is false."
        }
      }
    },
    "Connection": {
      "type": "object",
      "properties": {
        "qId": {
          "type": "string",
          "description": "Identifier of the connection.\nIs generated by the engine and is unique."
        },
        "qName": {
          "type": "string",
          "description": "Name of the connection.\nThis parameter is mandatory and must be set when creating or modifying a connection."
        },
        "qConnectionString": {
          "type": "string",
          "description": "One of:\n* ODBC CONNECT TO [&lt;provider name&gt;]\n* OLEDB CONNECT TO [&lt;provider name&gt;]\n* CUSTOM CONNECT TO [&lt;provider name&gt;]\n* \"&lt;local absolute or relative path, UNC path&gt;\"\n* \"&lt;URL&gt;\"\n\nConnection string.\nThis parameter is mandatory and must be set when creating or modifying a connection."
        },
        "qType": {
          "type": "string",
          "description": "One of:\n* ODBC\n* OLEDB\n* &lt;Name of the custom connection file&gt;\n* folder\n* internet\n\nType of the connection.\nThis parameter is mandatory and must be set when creating or modifying a connection.\nFor ODBC, OLEDB and custom connections, the engine checks that the connection type matches the connection string.\nThe type is not case sensitive."
        },
        "qUserName": {
          "type": "string",
          "description": "Name of the user who creates the connection.\nThis parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.\nA call to _GetConnection Method_ does not return the user name."
        },
        "qPassword": {
          "type": "string",
          "description": "Password of the user who creates the connection.\nThis parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.\nA call to _GetConnection Method_ does not return the password."
        },
        "qModifiedDate": {
          "type": "string",
          "description": "Is generated by the engine.\nCreation date of the connection or last modification date of the connection."
        },
        "qMeta": {
          "type": "object",
          "description": "Information about the connection.",
          "$ref": "#/definitions/NxMeta"
        },
        "qLogOn": {
          "type": "string",
          "description": "Select which user credentials to use to connect to the source.\n* LOG_ON_SERVICE_USER: Disables\n* LOG_ON_CURRENT_USER: Enables\n\nOne of:\n* LOG_ON_SERVICE_USER\n* LOG_ON_CURRENT_USER",
          "enum": [
            "LOG_ON_SERVICE_USER",
            "LOG_ON_CURRENT_USER"
          ]
        }
      }
    },
    "DatabaseInfo": {
      "type": "object",
      "properties": {
        "qDBMSName": {
          "type": "string",
          "description": "Name of the product accessed by the provider."
        },
        "qDBUsage": {
          "type": "boolean",
          "description": "If set to true, it means that the data source contains some databases."
        },
        "qOwnerUsage": {
          "type": "boolean",
          "description": "If set to true, it means that the data source contains some owners."
        },
        "qDBSeparator": {
          "type": "string",
          "description": "Character string used after the database name.\nExample with separator \" **.** \":\nFROM LinkedTablesData.dbo.Months\nWhere:\n* **LinkedTablesData** is the database name\n* **dbo** is the owner name\n* **Months** is the table name"
        },
        "qOwnerSeparator": {
          "type": "string",
          "description": "Character string used after the owner name.\nExample with separator \" **.** \":\nFROM LinkedTablesData.dbo.Months\nWhere:\n* **LinkedTablesData** is the database name\n* **dbo** is the owner name\n* **Months** is the table name"
        },
        "qDBFirst": {
          "type": "boolean",
          "description": "If set to true, it means that the database is displayed first, before the owners and tables."
        },
        "qQuotePreffix": {
          "type": "string",
          "description": "Prefix used with field, database or owner names that contain special characters or keywords."
        },
        "qQuoteSuffix": {
          "type": "string",
          "description": "Suffix used with field, database or owner names that contain special characters or keywords."
        },
        "qSpecialChars": {
          "type": "string",
          "description": "List of the special characters."
        },
        "qDefaultDatabase": {
          "type": "string",
          "description": "Name of the default database."
        },
        "qKeywords": {
          "type": "array",
          "description": "List of the script keywords.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Database": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the database."
        },
        "qIsDefault": {
          "type": "boolean",
          "description": "Is set to true if the database is set by default."
        }
      }
    },
    "DatabaseOwner": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the owner."
        }
      }
    },
    "DataTable": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the table."
        },
        "qType": {
          "type": "string",
          "description": "Type of the table.\nFor example: Table or View."
        }
      }
    },
    "DataField": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the field."
        },
        "qIsKey": {
          "type": "boolean",
          "description": "Is set to true if the field is a primary key.",
          "default": false
        },
        "qOriginalFieldName": {
          "type": "string",
          "description": "Is shown for fixed records.\n_qOriginalFieldName_ and _qName_ are identical if no field names are used in the file.\n_qOriginalFieldName_ differs from _qName_ if embedded file names are used in the file."
        }
      }
    },
    "DataRecord": {
      "type": "object",
      "properties": {
        "qValues": {
          "type": "array",
          "description": "List of values inside the table.\nThe first values (in _result/qPreview/0/qValues_ ) correspond to the field names in the table.\nThe following values (from _result/qPreview/1/qValues_ ) are the values of the fields in the table.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FilterInfo": {
      "type": "object",
      "properties": {
        "qType": {
          "type": "string",
          "description": "\nOne of:\n* NONE or FILTER_TYPE_NONE\n* RAW or FILTER_TYPE_RAW",
          "enum": [
            "FILTER_TYPE_NONE",
            "FILTER_TYPE_RAW"
          ]
        },
        "qWherePredicate": {
          "type": "string"
        }
      }
    },
    "FolderItem": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the folder item."
        },
        "qType": {
          "type": "string",
          "description": "Type of the folder item.\n\nOne of:\n* FOLDER or FOLDER_ITEM_FOLDER\n* FILE or FOLDER_ITEM_FILE\n* OTHER or FOLDER_ITEM_OTHER",
          "enum": [
            "FOLDER_ITEM_FOLDER",
            "FOLDER_ITEM_FILE",
            "FOLDER_ITEM_OTHER"
          ]
        }
      }
    },
    "FileDataFormat": {
      "type": "object",
      "description": "### FileType\nRecognized file formats are:\n* _CSV_ for Delimited\n* _FIX_ for Fixed Record\n* _DIF_ for Data Interchange Format\n* _EXCEL_BIFF_ for Microsoft Excel (XLS)\n* _EXCEL_OOXML_ for Microsoft Excel (XLSX)\n* _HTML_ for HTML\n* _QVD_ for QVD file\n* _XML_ for XML\n* _QVX_ for QVX file\n* _JSON_ for JSON format\n* _KML_ for KML file",
      "properties": {
        "qType": {
          "type": "string",
          "description": "Type of the file.\n\nOne of:\n* CSV or FILE_TYPE_CSV\n* FIX or FILE_TYPE_FIX\n* DIF or FILE_TYPE_DIF\n* EXCEL_BIFF or FILE_TYPE_EXCEL_BIFF\n* EXCEL_OOXML or FILE_TYPE_EXCEL_OOXML\n* HTML or FILE_TYPE_HTML\n* QVD or FILE_TYPE_QVD\n* XML or FILE_TYPE_XML\n* QVX or FILE_TYPE_QVX\n* JSON or FILE_TYPE_JSON\n* KML or FILE_TYPE_KML",
          "enum": [
            "FILE_TYPE_CSV",
            "FILE_TYPE_FIX",
            "FILE_TYPE_DIF",
            "FILE_TYPE_EXCEL_BIFF",
            "FILE_TYPE_EXCEL_OOXML",
            "FILE_TYPE_HTML",
            "FILE_TYPE_QVD",
            "FILE_TYPE_XML",
            "FILE_TYPE_QVX",
            "FILE_TYPE_JSON",
            "FILE_TYPE_KML"
          ]
        },
        "qLabel": {
          "type": "string",
          "description": "One of:\n* Embedded labels (field names are present in the file)\n* No labels\n* Explicit labels (for DIFfiles)"
        },
        "qQuote": {
          "type": "string",
          "description": "One of:\n* None (no quotes)\n* MSQ (Modern Style Quoting)\n* Standard (quotes \" \" or ' ' can be used, but only if they are the first and last non blank characters of a field value)\n\nThis property is used for delimited files."
        },
        "qComment": {
          "type": "string",
          "description": "String that marks the beginning of the comment line.\nExample: “#” or “//”\nThe engine ignores the commented lines during the data load.\nThis property is only used for delimited files."
        },
        "qDelimiter": {
          "type": "object",
          "description": "Information about the delimiter.\nThis property is used for delimited files.",
          "$ref": "#/definitions/DelimiterInfo"
        },
        "qCodePage": {
          "type": "integer",
          "description": "Character set used in the file.",
          "format": "int32"
        },
        "qHeaderSize": {
          "type": "integer",
          "description": "Size of the header.\nExample: If the header size is 2, the first two rows in the file are considered as header and not as data. The header can contain the field names.",
          "format": "int32"
        },
        "qRecordSize": {
          "type": "integer",
          "description": "Record length.\nEach record (row of data) contains a number of columns with a fixed field size.\nThis property is used for fixed record data files.",
          "format": "int32"
        },
        "qTabSize": {
          "type": "integer",
          "description": "Number of spaces that one tab character represents in the table file.\nThis property is used for fixed record data files.",
          "format": "int32"
        },
        "qIgnoreEOF": {
          "type": "boolean",
          "description": "Is set to true, the end-of-file character is not taken into account during reload.\nThis property is used for delimited files and fixed record data files."
        },
        "qFixedWidthDelimiters": {
          "type": "string",
          "description": "Positions of the field breaks in the table.\nThis property is used for fixed record data files."
        }
      }
    },
    "DelimiterInfo": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the delimiter.\nExample:\n\"Tab_DELIMITER\""
        },
        "qScriptCode": {
          "type": "string",
          "description": "Representation of the delimiter value that is used in the script.\nExample:\n\"'\\t'\""
        },
        "qNumber": {
          "type": "integer",
          "description": "Delimiter character number used by the engine to determine how to separate the values.",
          "format": "int32"
        },
        "qIsMultiple": {
          "type": "boolean",
          "description": "Is set to true if multiple spaces are used to separate the values."
        }
      }
    },
    "DataTableEx": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the table."
        },
        "qFields": {
          "type": "array",
          "description": "List of the fields in the table.",
          "items": {
            "$ref": "#/definitions/DataField"
          }
        },
        "qFormatSpec": {
          "type": "string",
          "description": "List of format specification items, within brackets.\nExamples of specification items:\n* file type\n* embedded labels, no labels\n* table is &lt;table name&gt;"
        }
      }
    },
    "SearchCombinationOptions": {
      "type": "object",
      "properties": {
        "qSearchFields": {
          "type": "array",
          "description": "List of the search fields.\nIf empty, the search is performed in all fields of the app.",
          "items": {
            "type": "string"
          }
        },
        "qContext": {
          "type": "string",
          "description": "Search context.\nThe default value is _LockedFieldsOnly_ .\n\nOne of:\n* Cleared or CONTEXT_CLEARED\n* LockedFieldsOnly or CONTEXT_LOCKED_FIELDS_ONLY\n* CurrentSelections or CONTEXT_CURRENT_SELECTIONS",
          "default": "CONTEXT_LOCKED_FIELDS_ONLY",
          "enum": [
            "CONTEXT_CLEARED",
            "CONTEXT_LOCKED_FIELDS_ONLY",
            "CONTEXT_CURRENT_SELECTIONS"
          ]
        },
        "qCharEncoding": {
          "type": "string",
          "description": "Encoding used to compute qRanges of type SearchCharRange.\n<div class=note>Only affects the computation of the ranges. It does not impact the encoding of the text.</div>\n\nOne of:\n* Utf8 or CHAR_ENCODING_UTF8\n* Utf16 or CHAR_ENCODING_UTF16",
          "default": "CHAR_ENCODING_UTF8",
          "enum": [
            "CHAR_ENCODING_UTF8",
            "CHAR_ENCODING_UTF16"
          ]
        },
        "qAttributes": {
          "type": "array",
          "description": "Optional.\n* For SearchSuggest method, this array is empty.\n* For SearchObjects method, this array is empty or contain _qProperty_ .\n* For SearchResults method, this array is empty, or contains _qNum_ and/or _qElemNum_ . It allows the user to request details in the outputted _SearchGroupItemMatch_ . For more information, see _SearchGroupItemMatch_.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SearchSuggestionResult": {
      "type": "object",
      "properties": {
        "qSuggestions": {
          "type": "array",
          "description": "List of suggestions.",
          "items": {
            "$ref": "#/definitions/SearchSuggestItem"
          }
        },
        "qFieldNames": {
          "type": "array",
          "description": "List of field names that contain search hits.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SearchSuggestItem": {
      "type": "object",
      "properties": {
        "qValue": {
          "type": "string",
          "description": "Value of the suggestion."
        },
        "qTerm": {
          "type": "integer",
          "description": "Index of the suggestion value.\nThe indexing starts from 0 and from the left.",
          "format": "int32"
        }
      }
    },
    "SearchPage": {
      "type": "object",
      "properties": {
        "qOffset": {
          "type": "integer",
          "description": "Position from the top, starting from 0.\nIf the offset is set to 0, the first search result to be returned is at position 0.",
          "format": "int32"
        },
        "qCount": {
          "type": "integer",
          "description": "Number of search groups to return (in _qSearchGroupArray_ ).",
          "format": "int32"
        },
        "qMaxNbrFieldMatches": {
          "type": "integer",
          "description": "Maximum number of matching values to return per search result.\nThe default value is -1; all values are returned.\nThis property is to be used with the _SearchAssociations method_.",
          "format": "int32",
          "default": -1
        },
        "qGroupOptions": {
          "type": "array",
          "description": "Options of the search groups.\nIf this property is not set, all values are returned.\nThis property is to be used with the _SearchResults method_ or the _SearchObjects method_.",
          "items": {
            "$ref": "#/definitions/SearchGroupOptions"
          }
        },
        "qGroupItemOptions": {
          "type": "array",
          "description": "Options of the search group items.\nIf this property is not set, all values are returned.\nThis property is to be used with the _SearchResults method_ or the _SearchObjects method_.",
          "items": {
            "$ref": "#/definitions/SearchGroupItemOptions"
          }
        }
      }
    },
    "SearchGroupOptions": {
      "type": "object",
      "properties": {
        "qGroupType": {
          "type": "string",
          "description": "Type of the group. Can be:\n* GenericObjectType: the type of the search group item is a generic object. Groups have this type when you are calling _SearchObjects_ .\n* DatasetType: type of the search group item is a dataset association. Groups have this type when you are calling _SearchResults_ .\n\nOne of:\n* DatasetType or DATASET_GROUP\n* GenericObjectsType or GENERIC_OBJECTS_GROUP",
          "enum": [
            "DATASET_GROUP",
            "GENERIC_OBJECTS_GROUP"
          ]
        },
        "qOffset": {
          "type": "integer",
          "description": "Position starting from 0.\nThe default value is 0.",
          "format": "int32",
          "default": 0
        },
        "qCount": {
          "type": "integer",
          "description": "Maximum number of items per group (in _qItems[ ]_ ).\nThe default value is -1; all values are returned.",
          "format": "int32",
          "default": -1
        }
      }
    },
    "SearchGroupItemOptions": {
      "type": "object",
      "properties": {
        "qGroupItemType": {
          "type": "string",
          "description": "Type of the group item. Can be:\n* GenericObject: the type of the search group item is a generic object. Group items have this type when you are calling _SearchObjects_ .\n* Field: the type of the search group item is a field. Group items have this type when you are calling _SearchResults_ .\n\nOne of:\n* Field or FIELD\n* GenericObject or GENERIC_OBJECT",
          "enum": [
            "FIELD",
            "GENERIC_OBJECT"
          ]
        },
        "qOffset": {
          "type": "integer",
          "description": "Position starting from 0.\nThe default value is 0.",
          "format": "int32",
          "default": 0
        },
        "qCount": {
          "type": "integer",
          "description": "Maximum number of matches per item (in _qItemMatches[ ]_ ).\nThe default value is -1: all values are returned.",
          "format": "int32",
          "default": -1
        }
      }
    },
    "SearchAssociationResult": {
      "type": "object",
      "properties": {
        "qFieldNames": {
          "type": "array",
          "description": "List of the fields that contains search associations.",
          "items": {
            "type": "string"
          }
        },
        "qSearchTerms": {
          "type": "array",
          "description": "List of the search terms.",
          "items": {
            "type": "string"
          }
        },
        "qFieldDictionaries": {
          "type": "array",
          "description": "Information about the fields containing search hits.",
          "items": {
            "$ref": "#/definitions/SearchFieldDictionary"
          }
        },
        "qSearchTermsMatched": {
          "type": "array",
          "description": "List of search results.\nThe maximum number of search results in this list is set by _qPage/qCount_ .",
          "items": {
            "$ref": "#/definitions/SearchMatchCombinations"
          }
        },
        "qTotalSearchResults": {
          "type": "integer",
          "description": "Total number of search results.\nThis number is not limited by _qPage/qCount_ .",
          "format": "int32"
        }
      }
    },
    "SearchFieldDictionary": {
      "type": "object",
      "properties": {
        "qField": {
          "type": "integer",
          "description": "Position of the field in the list of fields, starting from 0.\nThe list of fields is defined in _qResults/qFieldNames_ and contains the search associations.",
          "format": "int32"
        },
        "qResult": {
          "type": "array",
          "description": "List of the matching values.\nThe maximum number of values in this list is set by _qMaxNbrFieldMatches_ .",
          "items": {
            "$ref": "#/definitions/SearchTermResult"
          }
        }
      }
    },
    "SearchTermResult": {
      "type": "object",
      "properties": {
        "qText": {
          "type": "string",
          "description": "Text of the associated value."
        },
        "qElemNumber": {
          "type": "integer",
          "description": "Element number of the associated value.",
          "format": "int32"
        },
        "qRanges": {
          "type": "array",
          "description": "List of ranges.\nFor example, if the user searches the term _read_ and the associative value is _Reading_ , then the corresponding range would be _Read_ in _Reading_ .",
          "items": {
            "$ref": "#/definitions/SearchCharRange"
          }
        }
      }
    },
    "SearchCharRange": {
      "type": "object",
      "properties": {
        "qCharPos": {
          "type": "integer",
          "description": "Starting position of the match in the search result, starting from 0.",
          "format": "int32"
        },
        "qCharCount": {
          "type": "integer",
          "description": "Length of the match in the search result.",
          "format": "int32"
        },
        "qTerm": {
          "type": "integer",
          "description": "Position of the term in the list of search terms, starting from 0.",
          "format": "int32"
        }
      }
    },
    "SearchMatchCombinations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SearchMatchCombination"
      }
    },
    "SearchMatchCombination": {
      "type": "object",
      "properties": {
        "qId": {
          "type": "integer",
          "description": "Index of the search result, starting from 0.",
          "format": "int32"
        },
        "qFieldMatches": {
          "type": "array",
          "description": "Information about the search matches.",
          "items": {
            "$ref": "#/definitions/SearchFieldMatch"
          }
        }
      }
    },
    "SearchFieldMatch": {
      "type": "object",
      "properties": {
        "qField": {
          "type": "integer",
          "description": "Position of the field in the list of fields, starting from 0.\nThe list of fields is defined in _qResults/qFieldNames_ and contains the search associations.",
          "format": "int32"
        },
        "qValues": {
          "type": "array",
          "description": "Positions of the matching values in the search results.\nThe maximum number of values in this list is defined by _qMaxNbrFieldMatches_ .",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "qTerms": {
          "type": "array",
          "description": "Positions of the search terms, starting from 0.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "qNoOfMatches": {
          "type": "integer",
          "description": "Number of search hits in the field.\nThe number of values in _qValues_ and the value of _qNoOfMatches_ are equal if _qMaxNbrFieldMatches_ is -1.",
          "format": "int32"
        }
      }
    },
    "SearchResult": {
      "type": "object",
      "properties": {
        "qSearchTerms": {
          "type": "array",
          "description": "List of the search terms.",
          "items": {
            "type": "string"
          }
        },
        "qTotalNumberOfGroups": {
          "type": "integer",
          "description": "Total number of groups.",
          "format": "int32"
        },
        "qSearchGroupArray": {
          "type": "array",
          "description": "List of search groups.\nThe groups are numbered from the value of _SearchPage.qOffset_ to the value of _SearchPage.qOffset + SearchPage.qCount_ .",
          "items": {
            "$ref": "#/definitions/SearchGroup"
          }
        }
      }
    },
    "SearchGroup": {
      "type": "object",
      "properties": {
        "qId": {
          "type": "integer",
          "description": "Identifier of the search group.",
          "format": "int32"
        },
        "qGroupType": {
          "type": "string",
          "description": "Type of the search group.\n\nOne of:\n* DatasetType or DATASET_GROUP\n* GenericObjectsType or GENERIC_OBJECTS_GROUP",
          "enum": [
            "DATASET_GROUP",
            "GENERIC_OBJECTS_GROUP"
          ]
        },
        "qSearchTermsMatched": {
          "type": "array",
          "description": "Indexes of the search terms that are included in the group. These search terms are related to the list of terms defined in _SearchResult.qSearchTerms_ .",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "qTotalNumberOfItems": {
          "type": "integer",
          "description": "Total number of distinct items in the search group.",
          "format": "int32"
        },
        "qItems": {
          "type": "array",
          "description": "List of items in the search group.\nThe group items are numbered from the value of _SearchGroupOptions.qOffset_ to the value of _SearchGroupOptions.qOffset_ \\+ _SearchGroupOptions.qCount_",
          "items": {
            "$ref": "#/definitions/SearchGroupItem"
          }
        }
      }
    },
    "SearchGroupItem": {
      "type": "object",
      "properties": {
        "qItemType": {
          "type": "string",
          "description": "Type of the group item.\n\nOne of:\n* Field or FIELD\n* GenericObject or GENERIC_OBJECT",
          "enum": [
            "FIELD",
            "GENERIC_OBJECT"
          ]
        },
        "qTotalNumberOfMatches": {
          "type": "integer",
          "description": "Total number of distinct matches in the search group item.",
          "format": "int32"
        },
        "qIdentifier": {
          "type": "string",
          "description": "Identifier of the item.\nIt corresponds to:\n* The name of the field, if the type of the search group is data set.\n* The id of the generic object if the type of the search group is generic object."
        },
        "qItemMatches": {
          "type": "array",
          "description": "List of matches in the search group item.\nThe group item matches are numbered from the value of _SearchGroupItemOptions.qOffset_ to the value of _SearchGroupItemOptions.qOffset_ \\+ _SearchGroupItemOptions.qCount_ .",
          "items": {
            "$ref": "#/definitions/SearchGroupItemMatch"
          }
        },
        "qSearchTermsMatched": {
          "type": "array",
          "description": "Indexes of the search terms that are included in the group item. These search terms are related to the list of terms defined in _SearchResult.qSearchTerms_ .",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "SearchGroupItemMatch": {
      "type": "object",
      "properties": {
        "qText": {
          "type": "string",
          "description": "Search match value.\nValue of the search group item.\nIf the match is found in a field, it corresponds to the value of the field.\nIf the match is found in a generic object property, it corresponds to the property value."
        },
        "qRanges": {
          "type": "array",
          "description": "List of ranges.\nFor example, if the search terms are Price and Make, and the search group item value is Make by Price vs Mileage, then there are two ranges: one for Price and one for Make.",
          "items": {
            "$ref": "#/definitions/SearchCharRange"
          }
        },
        "qAttributes": {
          "type": "array",
          "description": "Provides detail of the match as requested by the user in _SearchObjectsOptions.qAttributes_ or _SearchCombinationOptions.qAttributes_\nIf the user requests _SearchObjects_ or _SearchResults_ with an empty _qAttributes_ option, the outputted _qAttributes_ is returned empty.\nFor _SearchObjects_ requested with _qProperty_ , the _SearchGroupItemMatch.qAttributes_ return value contains _[“qProperty”, \"qMetaDef/title”]_ if the match has been found in the title of the item. For dimension values, the returned _qProperty_ will be _“*”_ .\nFor _SearchResults_ requested with _qNum_ , the _SearchGroupItemMatch.qAttributes_ return value contains _[\"qNum\", N]_ where _N_ is the numeric value of the element or _NaN_ if the value is not numeric.\nFor _SearchResults_ requested with _qElemNum_ , the _SearchGroupItemMatch.qAttributes_ return value contains _[\"qElemNum\", N]_ where _N_ is the value index of the element.",
          "items": {
            "$ref": "#/definitions/SearchAttribute"
          }
        }
      }
    },
    "SearchAttribute": {
      "type": "object",
      "properties": {
        "qKey": {
          "type": "string",
          "description": "String corresponding to _SearchObjectOptions.qAttributes_. It will be _qProperty_ for _SearchObjectOptions_."
        },
        "qValue": {
          "type": "string",
          "description": "String corresponding to _qKey_ for the current _SearchGroupItemMatch_. For example, if the match is _Make by Price_ found in the title of a generic object, _qValue_ will be _qMetaDef/title_."
        }
      }
    },
    "SearchObjectOptions": {
      "type": "object",
      "properties": {
        "qAttributes": {
          "type": "array",
          "description": "This array is either empty or contains _qProperty_ .",
          "items": {
            "type": "string"
          }
        },
        "qCharEncoding": {
          "type": "string",
          "description": "Encoding used to compute qRanges of type SearchCharRange.\n<div class=note>Only affects the computation of the ranges. It does not impact the encoding of the text.</div>\n\nOne of:\n* Utf8 or CHAR_ENCODING_UTF8\n* Utf16 or CHAR_ENCODING_UTF16",
          "default": "CHAR_ENCODING_UTF8",
          "enum": [
            "CHAR_ENCODING_UTF8",
            "CHAR_ENCODING_UTF16"
          ]
        }
      }
    },
    "AppScript": {
      "type": "object",
      "properties": {
        "qScript": {
          "type": "string",
          "description": "Script text."
        },
        "qMeta": {
          "type": "object",
          "description": "Information about publishing and permissions.\nThis parameter is optional.",
          "$ref": "#/definitions/NxMeta"
        }
      }
    },
    "ProgressData": {
      "type": "object",
      "properties": {
        "qStarted": {
          "type": "boolean",
          "description": "True if the request is started."
        },
        "qFinished": {
          "type": "boolean",
          "description": "True if the request is finished."
        },
        "qCompleted": {
          "type": "integer",
          "description": "This property is not used.",
          "format": "int64"
        },
        "qTotal": {
          "type": "integer",
          "description": "This property is not used.",
          "format": "int64"
        },
        "qKB": {
          "type": "integer",
          "description": "This property is not used.",
          "format": "int32"
        },
        "qMillisecs": {
          "type": "integer",
          "description": "Request duration in milliseconds.",
          "format": "int32"
        },
        "qUserInteractionWanted": {
          "type": "boolean",
          "description": "True when the engine pauses the script execution and waits for a user interaction."
        },
        "qPersistentProgress": {
          "type": "string",
          "description": "A progress message is persistent when it informs about the start or end of a statement. For example, it can inform about the total number of lines fetched from a data source or tell that the app was saved. All persistent progress messages between two *GetProgress* calls are summarized in this string. Contrarily to *qPersistentProgressMessages*, the content of the localized message string is displayed (not its message code)."
        },
        "qTransientProgress": {
          "type": "string",
          "description": "A progress message is transient when it informs about the progress of an ongoing statement. For example, it can tell how many lines are currently fetched from a data source. All transient progress messages between two *GetProgress* calls are summarized in this string. Contrarily to *qTransientProgressMessage*, the content of the localized message string is displayed (not its message code)."
        },
        "qErrorData": {
          "type": "array",
          "description": "Information about the error messages that occur during the script execution.",
          "items": {
            "$ref": "#/definitions/ErrorData"
          }
        },
        "qPersistentProgressMessages": {
          "type": "array",
          "description": "List of persistent progress messages.",
          "items": {
            "$ref": "#/definitions/ProgressMessage"
          }
        },
        "qTransientProgressMessage": {
          "type": "object",
          "description": "Transient progress message.",
          "$ref": "#/definitions/ProgressMessage"
        }
      }
    },
    "ErrorData": {
      "type": "object",
      "properties": {
        "qErrorString": {
          "type": "string",
          "description": "Detailed information about the error message."
        },
        "qLineEnd": {
          "type": "string",
          "description": "Line termination characters."
        },
        "qLine": {
          "type": "string",
          "description": "Script statement where the error occurs."
        },
        "qErrorDataCode": {
          "type": "string",
          "description": "Type of the error messages.\n\nOne of:\n* EDC_ERROR\n* EDC_WARNING\n* EDC_CIRCULAR_REFERENCE",
          "enum": [
            "EDC_ERROR",
            "EDC_WARNING",
            "EDC_CIRCULAR_REFERENCE"
          ]
        },
        "qMessage": {
          "type": "object",
          "$ref": "#/definitions/ProgressMessage"
        }
      }
    },
    "ProgressMessage": {
      "type": "object",
      "properties": {
        "qMessageCode": {
          "type": "integer",
          "description": "Code number to the corresponding localized message string.",
          "format": "int32"
        },
        "qMessageParameters": {
          "type": "array",
          "description": "Parameters to be inserted in the localized message string.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DocListEntry": {
      "type": "object",
      "properties": {
        "qDocName": {
          "type": "string",
          "description": "Name of the app."
        },
        "qConnectedUsers": {
          "type": "integer",
          "description": "Not used.",
          "format": "int32"
        },
        "qFileTime": {
          "type": "number",
          "description": "Last modified time stamp of the app.\nThis property is used only with Qlik Sense Desktop.\nIt is set to 0 for Qlik Sense Enterprise.",
          "format": "double"
        },
        "qFileSize": {
          "type": "number",
          "description": "Size of remote app.\nThis property is used only with Qlik Sense Desktop.\nIt is set to 0 for Qlik Sense Enterprise.",
          "format": "double"
        },
        "qDocId": {
          "type": "string",
          "description": "Identifier of the app.\n* In Qlik Sense Desktop, the identifier is the path and name of the app.\n* In Qlik Sense Enterprise, the identifier is the app's GUID."
        },
        "qMeta": {
          "type": "object",
          "description": "Meta data related to the app.",
          "$ref": "#/definitions/NxMeta"
        },
        "qLastReloadTime": {
          "type": "string",
          "description": "Last reload time of the app."
        },
        "qReadOnly": {
          "type": "boolean",
          "description": "If set to true, the app is read-only."
        },
        "qTitle": {
          "type": "string",
          "description": "Title of the app."
        },
        "qThumbnail": {
          "type": "object",
          "description": "Thumbnail of the app.",
          "$ref": "#/definitions/StaticContentUrl"
        }
      }
    },
    "InteractDef": {
      "type": "object",
      "properties": {
        "qType": {
          "type": "string",
          "description": "Interaction type.\n\nOne of:\n* IT_MSGBOX\n* IT_SCRIPTLINE\n* IT_BREAK\n* IT_INPUT\n* IT_END\n* IT_PASSWD\n* IT_USERNAME",
          "enum": [
            "IT_MSGBOX",
            "IT_SCRIPTLINE",
            "IT_BREAK",
            "IT_INPUT",
            "IT_END",
            "IT_PASSWD",
            "IT_USERNAME"
          ]
        },
        "qTitle": {
          "type": "string",
          "description": "Title used in the message box dialog.\nThis property is relevant if _qType_ is *IT_MSGBOX*."
        },
        "qMsg": {
          "type": "string",
          "description": "Message used in the message box dialog.\nThis property is relevant if _qType_ is *IT_MSGBOX*."
        },
        "qButtons": {
          "type": "integer",
          "description": "Buttons displayed in the message box dialog.\nThis property is relevant if _qType_ is *IT_MSGBOX*.\nOne of:\n* 0 means that the _qButtons_ property is not relevant.\n* 17 means that the message box contains the **OK** and **Cancel** buttons or the **stop** -sign icon.",
          "format": "int32"
        },
        "qLine": {
          "type": "string",
          "description": "Next script statement to be executed.\nThis property is used if the type of interaction is *IT_SCRIPTLINE*."
        },
        "qOldLineNr": {
          "type": "integer",
          "description": "First line number of the previously executed statement.\nThis property is used if the type of interaction is *IT_SCRIPTLINE*.",
          "format": "int32"
        },
        "qNewLineNr": {
          "type": "integer",
          "description": "First line number of the next statement to be executed.\nThis property is used if the type of interaction is *IT_SCRIPTLINE*.",
          "format": "int32"
        },
        "qPath": {
          "type": "string",
          "description": "Path specified by the **Include** script variable.\nThis property is used if the type of interaction is *IT_SCRIPTLINE*.\nExample of an **Include** variable:\n_$(Include=lib:\\\\\\MyDataFiles\\abc.txt);_"
        },
        "qHidden": {
          "type": "boolean",
          "description": "This property is set to true if the returned statement is an hidden script statement."
        },
        "qResult": {
          "type": "integer",
          "description": "Not relevant for describing the requested user interaction.",
          "format": "int32"
        },
        "qInput": {
          "type": "string",
          "description": "Is not used in Qlik Sense."
        }
      }
    },
    "AppEntry": {
      "type": "object",
      "properties": {
        "qID": {
          "type": "string",
          "description": "Identifier of the app."
        },
        "qTitle": {
          "type": "string",
          "description": "Title of the app."
        },
        "qPath": {
          "type": "string",
          "description": "Path of the app."
        },
        "qLastReloadTime": {
          "type": "string",
          "description": "Last reload time of the app."
        },
        "qReadOnly": {
          "type": "boolean",
          "description": "Is set to true if the app is read-only."
        },
        "qMeta": {
          "type": "object",
          "description": "Meta data.",
          "$ref": "#/definitions/NxMeta"
        },
        "qThumbnail": {
          "type": "object",
          "description": "App thumbnail.",
          "$ref": "#/definitions/StaticContentUrl"
        },
        "qFileSize": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BNFDef": {
      "type": "object",
      "properties": {
        "qBnf": {
          "type": "array",
          "description": "Array of token references that all together build up the definition of the current token.\nGenerally, if the array is not empty, the definition is a BNF rule (_qIsBnfRule_ is set to true). However, some BNF  rules do have an empty array (_qIsBnfRule_ is set to true, but _qBnf_ is empty).",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "qNbr": {
          "type": "integer",
          "description": "Number of the current token definition.",
          "format": "int32"
        },
        "qPNbr": {
          "type": "integer",
          "description": "Number of the parent rule definition.",
          "format": "int32"
        },
        "qHelpId": {
          "type": "integer",
          "description": "Reference identifier to a function described in the documentation. The identifier is stored in the definition of the token containing the function name.\nIs not used in Qlik Sense.",
          "format": "int32"
        },
        "qName": {
          "type": "string",
          "description": "Token name.\nOne of:\n* A rule name\n* An identifier\n* A literal value"
        },
        "qStr": {
          "type": "string",
          "description": "Literal string of the token.\nExamples: 'Round' and '('."
        },
        "qIsBnfRule": {
          "type": "boolean",
          "description": "If set to true, a list of related rule tokens is assigned to _qBnf_ .\nThis parameter is optional. The default value is false.",
          "default": false
        },
        "qScriptStatement": {
          "type": "boolean",
          "description": "If set to true, the definition specifies a script statement.\nThis parameter is optional. The default value is false.",
          "default": false
        },
        "qControlStatement": {
          "type": "boolean",
          "description": "If set to true, the definition specifies a control statement.\nThis parameter is optional. The default value is false.",
          "default": false
        },
        "qBnfLiteral": {
          "type": "boolean",
          "description": "If set to true, the definition specifies a literal token.\nThis parameter is optional. The default value is false.",
          "default": false
        },
        "qQvFunc": {
          "type": "boolean",
          "description": "If set to true, the definition is related to a Qlik Sense function. It cannot be an aggregation function.\nThis parameter is optional. The default value is false.",
          "default": false
        },
        "qAggrFunc": {
          "type": "boolean",
          "description": "If set to true, the definition is related to an aggregation function.\nThis parameter is optional. The default value is false.",
          "default": false
        },
        "qFG": {
          "type": "string",
          "description": "Group of the function.\n\nOne of:\n* ALL or FUNC_GROUP_ALL\n* U or FUNC_GROUP_UNKNOWN\n* NONE or FUNC_GROUP_NONE\n* AGGR or FUNC_GROUP_AGGR\n* NUM or FUNC_GROUP_NUMERIC\n* RNG or FUNC_GROUP_RANGE\n* EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC\n* TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC\n* FIN or FUNC_GROUP_FINANCIAL\n* MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE\n* COUNT or FUNC_GROUP_COUNTER\n* STR or FUNC_GROUP_STRING\n* MAPP or FUNC_GROUP_MAPPING\n* RCRD or FUNC_GROUP_INTER_RECORD\n* CND or FUNC_GROUP_CONDITIONAL\n* LOG or FUNC_GROUP_LOGICAL\n* NULL or FUNC_GROUP_NULL\n* SYS or FUNC_GROUP_SYSTEM\n* FILE or FUNC_GROUP_FILE\n* TBL or FUNC_GROUP_TABLE\n* DATE or FUNC_GROUP_DATE_AND_TIME\n* NUMI or FUNC_GROUP_NUMBER_INTERPRET\n* FRMT or FUNC_GROUP_FORMATTING\n* CLR or FUNC_GROUP_COLOR\n* RNK or FUNC_GROUP_RANKING\n* GEO or FUNC_GROUP_GEO\n* EXT or FUNC_GROUP_EXTERNAL",
          "enum": [
            "FUNC_GROUP_ALL",
            "FUNC_GROUP_UNKNOWN",
            "FUNC_GROUP_NONE",
            "FUNC_GROUP_AGGR",
            "FUNC_GROUP_NUMERIC",
            "FUNC_GROUP_RANGE",
            "FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC",
            "FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC",
            "FUNC_GROUP_FINANCIAL",
            "FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE",
            "FUNC_GROUP_COUNTER",
            "FUNC_GROUP_STRING",
            "FUNC_GROUP_MAPPING",
            "FUNC_GROUP_INTER_RECORD",
            "FUNC_GROUP_CONDITIONAL",
            "FUNC_GROUP_LOGICAL",
            "FUNC_GROUP_NULL",
            "FUNC_GROUP_SYSTEM",
            "FUNC_GROUP_FILE",
            "FUNC_GROUP_TABLE",
            "FUNC_GROUP_DATE_AND_TIME",
            "FUNC_GROUP_NUMBER_INTERPRET",
            "FUNC_GROUP_FORMATTING",
            "FUNC_GROUP_COLOR",
            "FUNC_GROUP_RANKING",
            "FUNC_GROUP_GEO",
            "FUNC_GROUP_EXTERNAL"
          ]
        },
        "qFieldFlag": {
          "type": "boolean",
          "description": "If set to true, the definition is related to a field.\nThis parameter is optional. The default value is false.",
          "default": false
        },
        "qMT": {
          "type": "string",
          "description": "Type of the data.\n\nOne of:\n* N or NOT_META\n* D or META_DOC_NAME\n* R or META_RET_TYPE\n* V or META_DEFAULT_VALUE",
          "enum": [
            "NOT_META",
            "META_DOC_NAME",
            "META_RET_TYPE",
            "META_DEFAULT_VALUE"
          ]
        },
        "qDepr": {
          "type": "boolean",
          "description": "Indicates whether a script statement, a chart or a script function is deprecated (not recommended for use).\nIf set to true, the script statement or the function is not recommended for use in Qlik Sense.\nThis parameter is optional. The default value is false.",
          "default": false
        }
      }
    },
    "Function": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the script function."
        },
        "qGroup": {
          "type": "string",
          "description": "Group of the script function.\n\nOne of:\n* ALL or FUNC_GROUP_ALL\n* U or FUNC_GROUP_UNKNOWN\n* NONE or FUNC_GROUP_NONE\n* AGGR or FUNC_GROUP_AGGR\n* NUM or FUNC_GROUP_NUMERIC\n* RNG or FUNC_GROUP_RANGE\n* EXP or FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC\n* TRIG or FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC\n* FIN or FUNC_GROUP_FINANCIAL\n* MATH or FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE\n* COUNT or FUNC_GROUP_COUNTER\n* STR or FUNC_GROUP_STRING\n* MAPP or FUNC_GROUP_MAPPING\n* RCRD or FUNC_GROUP_INTER_RECORD\n* CND or FUNC_GROUP_CONDITIONAL\n* LOG or FUNC_GROUP_LOGICAL\n* NULL or FUNC_GROUP_NULL\n* SYS or FUNC_GROUP_SYSTEM\n* FILE or FUNC_GROUP_FILE\n* TBL or FUNC_GROUP_TABLE\n* DATE or FUNC_GROUP_DATE_AND_TIME\n* NUMI or FUNC_GROUP_NUMBER_INTERPRET\n* FRMT or FUNC_GROUP_FORMATTING\n* CLR or FUNC_GROUP_COLOR\n* RNK or FUNC_GROUP_RANKING\n* GEO or FUNC_GROUP_GEO\n* EXT or FUNC_GROUP_EXTERNAL",
          "enum": [
            "FUNC_GROUP_ALL",
            "FUNC_GROUP_UNKNOWN",
            "FUNC_GROUP_NONE",
            "FUNC_GROUP_AGGR",
            "FUNC_GROUP_NUMERIC",
            "FUNC_GROUP_RANGE",
            "FUNC_GROUP_EXPONENTIAL_AND_LOGARITHMIC",
            "FUNC_GROUP_TRIGONOMETRIC_AND_HYPERBOLIC",
            "FUNC_GROUP_FINANCIAL",
            "FUNC_GROUP_MATH_CONSTANT_AND_PARAM_FREE",
            "FUNC_GROUP_COUNTER",
            "FUNC_GROUP_STRING",
            "FUNC_GROUP_MAPPING",
            "FUNC_GROUP_INTER_RECORD",
            "FUNC_GROUP_CONDITIONAL",
            "FUNC_GROUP_LOGICAL",
            "FUNC_GROUP_NULL",
            "FUNC_GROUP_SYSTEM",
            "FUNC_GROUP_FILE",
            "FUNC_GROUP_TABLE",
            "FUNC_GROUP_DATE_AND_TIME",
            "FUNC_GROUP_NUMBER_INTERPRET",
            "FUNC_GROUP_FORMATTING",
            "FUNC_GROUP_COLOR",
            "FUNC_GROUP_RANKING",
            "FUNC_GROUP_GEO",
            "FUNC_GROUP_EXTERNAL"
          ]
        },
        "qSignature": {
          "type": "string",
          "description": "Signature of the script function.\nGives general information about the function."
        }
      }
    },
    "OdbcDsn": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the ODBC connection."
        },
        "qDescription": {
          "type": "string",
          "description": "Description of the ODBC connection."
        },
        "qBit32": {
          "type": "boolean",
          "description": "Is set to true if the version of ODBC is 32-bit.\nThis parameter is optional. Default is false.",
          "default": false
        },
        "qUserOnly": {
          "type": "boolean",
          "description": "Is set to true if the connection is User DSN. The connection works only for a specific user.\nDefault is false.\nThis parameter is optional.",
          "default": false
        }
      }
    },
    "OleDbProvider": {
      "type": "object",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the OLEDB provider."
        },
        "qDescription": {
          "type": "string",
          "description": "Description of the OLEDB provider."
        },
        "qBit32": {
          "type": "boolean",
          "description": "Is set to true if the version of the OLEDB provider is 32-bit.\nDefault is false.\nThis parameter is optional.",
          "default": false
        }
      }
    },
    "DriveInfo": {
      "type": "object",
      "properties": {
        "qDrive": {
          "type": "string",
          "description": "Value of the drive.\nExamples:\nC:\\\\\\, E:\\\\\\"
        },
        "qType": {
          "type": "string",
          "description": "Type of the drive.\n_Fixed_ means physical drive."
        },
        "qName": {
          "type": "string",
          "description": "Name of the drive."
        },
        "qTypeIdentifier": {
          "type": "string",
          "description": "Information about the drive type.\n\nOne of:\n* REMOVABLE\n* FIXED\n* NETWORK\n* CD_ROM\n* RAM\n* UNKNOWN_TYPE",
          "enum": [
            "REMOVABLE",
            "FIXED",
            "NETWORK",
            "CD_ROM",
            "RAM",
            "UNKNOWN_TYPE"
          ]
        },
        "qUnnamedDrive": {
          "type": "boolean"
        }
      }
    },
    "CodePage": {
      "type": "object",
      "properties": {
        "qNumber": {
          "type": "integer",
          "description": "Number of the code page.",
          "format": "int32"
        },
        "qName": {
          "type": "string",
          "description": "Name of the code page."
        },
        "qDescription": {
          "type": "string",
          "description": "Description of the code page."
        }
      }
    },
    "CustomConnector": {
      "type": "object",
      "properties": {
        "qProvider": {
          "type": "string",
          "description": "Name of the custom connector file."
        },
        "qParent": {
          "type": "string",
          "description": "Name of the parent folder that contains the custom connector file."
        },
        "qDisplayName": {
          "type": "string",
          "description": "Name of the custom connector as displayed in the Qlik interface."
        },
        "qMachineMode": {
          "type": "string",
          "description": "Mode of the machine (64 or 32 bits).\n\nOne of:\n* CONNECT_DEFAULT\n* CONNECT_64\n* CONNECT_32",
          "enum": [
            "CONNECT_DEFAULT",
            "CONNECT_64",
            "CONNECT_32"
          ]
        },
        "qSupportFileStreaming": {
          "type": "boolean"
        }
      }
    },
    "NxStreamListEntry": {
      "type": "object",
      "description": "<div class=warning>This struct is deprecated (not recommended to use).</div>",
      "properties": {
        "qName": {
          "type": "string",
          "description": "Name of the stream."
        },
        "qId": {
          "type": "string",
          "description": "Identifier of the stream."
        }
      }
    },
    "NxEngineVersion": {
      "type": "object",
      "properties": {
        "qComponentVersion": {
          "type": "string",
          "description": "Version number of the Qlik engine component."
        }
      }
    }
  }
}